(()=>{"use strict";var e={56:(e,t,i)=>{e.exports=function(e){var t=i.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function i(e){for(var i=-1,s=0;s<t.length;s++)if(t[s].identifier===e){i=s;break}return i}function s(e,s){for(var n={},a=[],o=0;o<e.length;o++){var l=e[o],d=s.base?l[0]+s.base:l[0],p=n[d]||0,c="".concat(d," ").concat(p);n[d]=p+1;var u=i(c),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=r(h,s);s.byIndex=o,t.splice(o,0,{identifier:c,updater:m,references:1})}a.push(c)}return a}function r(e,t){var i=t.domAPI(t);return i.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;i.update(e=t)}else i.remove()}}e.exports=function(e,r){var n=s(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<n.length;a++){var o=i(n[a]);t[o].references--}for(var l=s(e,r),d=0;d<n.length;d++){var p=i(n[d]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}n=l}}},85:e=>{e.exports="data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA"},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i="",s=void 0!==t[5];return t[4]&&(i+="@supports (".concat(t[4],") {")),t[2]&&(i+="@media ".concat(t[2]," {")),s&&(i+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),i+=e(t),s&&(i+="}"),t[2]&&(i+="}"),t[4]&&(i+="}"),i})).join("")},t.i=function(e,i,s,r,n){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(s)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var p=[].concat(e[d]);s&&a[p[0]]||(void 0!==n&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=n),i&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=i):p[2]=i),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),t.push(p))}},t}},354:e=>{e.exports=function(e){var t=e[1],i=e[3];if(!i)return t;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),n="/*# ".concat(r," */");return[t].concat([n]).join("\n")}return[t].join("\n")}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},659:e=>{var t={};e.exports=function(e,i){var s=function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}(e);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(i)}},753:(e,t,i)=>{i.d(t,{A:()=>u});var s=i(354),r=i.n(s),n=i(314),a=i.n(n),o=i(417),l=i.n(o),d=new URL(i(85),i.b),p=a()(r()),c=l()(d);p.push([e.id,`/**\n * Swiper 11.2.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: May 23, 2025\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url(${c});\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n.swiper-virtual .swiper-slide {\n  -webkit-backface-visibility: hidden;\n  transform: translateZ(0);\n}\n.swiper-virtual.swiper-css-mode .swiper-wrapper::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n}\n.swiper-virtual.swiper-css-mode.swiper-horizontal .swiper-wrapper::after {\n  height: 1px;\n  width: var(--swiper-virtual-size);\n}\n.swiper-virtual.swiper-css-mode.swiper-vertical .swiper-wrapper::after {\n  width: 1px;\n  height: var(--swiper-virtual-size);\n}\n:root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: var(--swiper-navigation-top-offset, 50%);\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev.swiper-button-hidden,\n.swiper-button-next.swiper-button-hidden {\n  opacity: 0;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-navigation-disabled .swiper-button-prev,\n.swiper-navigation-disabled .swiper-button-next {\n  display: none !important;\n}\n.swiper-button-prev svg,\n.swiper-button-next svg {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  transform-origin: center;\n}\n.swiper-rtl .swiper-button-prev svg,\n.swiper-rtl .swiper-button-next svg {\n  transform: rotate(180deg);\n}\n.swiper-button-prev,\n.swiper-rtl .swiper-button-next {\n  left: var(--swiper-navigation-sides-offset, 10px);\n  right: auto;\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-lock {\n  display: none;\n}\n/* Navigation font start */\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev:after,\n.swiper-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n/* Navigation font end */\n:root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n:root {\n  /*\n  --swiper-scrollbar-border-radius: 10px;\n  --swiper-scrollbar-top: auto;\n  --swiper-scrollbar-bottom: 4px;\n  --swiper-scrollbar-left: auto;\n  --swiper-scrollbar-right: 4px;\n  --swiper-scrollbar-sides-offset: 1%;\n  --swiper-scrollbar-bg-color: rgba(0, 0, 0, 0.1);\n  --swiper-scrollbar-drag-bg-color: rgba(0, 0, 0, 0.5);\n  --swiper-scrollbar-size: 4px;\n  */\n}\n.swiper-scrollbar {\n  border-radius: var(--swiper-scrollbar-border-radius, 10px);\n  position: relative;\n  touch-action: none;\n  background: var(--swiper-scrollbar-bg-color, rgba(0, 0, 0, 0.1));\n}\n.swiper-scrollbar-disabled > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-disabled {\n  display: none !important;\n}\n.swiper-horizontal > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-horizontal {\n  position: absolute;\n  left: var(--swiper-scrollbar-sides-offset, 1%);\n  bottom: var(--swiper-scrollbar-bottom, 4px);\n  top: var(--swiper-scrollbar-top, auto);\n  z-index: 50;\n  height: var(--swiper-scrollbar-size, 4px);\n  width: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 1%));\n}\n.swiper-vertical > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-vertical {\n  position: absolute;\n  left: var(--swiper-scrollbar-left, auto);\n  right: var(--swiper-scrollbar-right, 4px);\n  top: var(--swiper-scrollbar-sides-offset, 1%);\n  z-index: 50;\n  width: var(--swiper-scrollbar-size, 4px);\n  height: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 1%));\n}\n.swiper-scrollbar-drag {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  background: var(--swiper-scrollbar-drag-bg-color, rgba(0, 0, 0, 0.5));\n  border-radius: var(--swiper-scrollbar-border-radius, 10px);\n  left: 0;\n  top: 0;\n}\n.swiper-scrollbar-cursor-drag {\n  cursor: move;\n}\n.swiper-scrollbar-lock {\n  display: none;\n}\n/* Zoom container styles start */\n.swiper-zoom-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n.swiper-zoom-container > img,\n.swiper-zoom-container > svg,\n.swiper-zoom-container > canvas {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n}\n/* Zoom container styles end */\n.swiper-slide-zoomed {\n  cursor: move;\n  touch-action: none;\n}\n/* a11y */\n.swiper .swiper-notification {\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  opacity: 0;\n  z-index: -1000;\n}\n.swiper-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n.swiper-grid > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n.swiper-grid-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n.swiper-fade.swiper-free-mode .swiper-slide {\n  transition-timing-function: ease-out;\n}\n.swiper-fade .swiper-slide {\n  pointer-events: none;\n  transition-property: opacity;\n}\n.swiper-fade .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-fade .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-fade .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper.swiper-cube {\n  overflow: visible;\n}\n.swiper-cube .swiper-slide {\n  pointer-events: none;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  z-index: 1;\n  visibility: hidden;\n  transform-origin: 0 0;\n  width: 100%;\n  height: 100%;\n}\n.swiper-cube .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-cube.swiper-rtl .swiper-slide {\n  transform-origin: 100% 0;\n}\n.swiper-cube .swiper-slide-active,\n.swiper-cube .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-cube .swiper-slide-active,\n.swiper-cube .swiper-slide-next,\n.swiper-cube .swiper-slide-prev {\n  pointer-events: auto;\n  visibility: visible;\n}\n.swiper-cube .swiper-cube-shadow {\n  position: absolute;\n  left: 0;\n  bottom: 0px;\n  width: 100%;\n  height: 100%;\n  opacity: 0.6;\n  z-index: 0;\n}\n.swiper-cube .swiper-cube-shadow:before {\n  content: '';\n  background: #000;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  filter: blur(50px);\n}\n.swiper-cube .swiper-slide-next + .swiper-slide {\n  pointer-events: auto;\n  visibility: visible;\n}\n/* Cube slide shadows start */\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-top,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-bottom,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-left,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-right {\n  z-index: 0;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* Cube slide shadows end */\n.swiper.swiper-flip {\n  overflow: visible;\n}\n.swiper-flip .swiper-slide {\n  pointer-events: none;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  z-index: 1;\n}\n.swiper-flip .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-flip .swiper-slide-active,\n.swiper-flip .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n/* Flip slide shadows start */\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-top,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-bottom,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-left,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-right {\n  z-index: 0;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* Flip slide shadows end */\n.swiper-creative .swiper-slide {\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  overflow: hidden;\n  transition-property: transform, opacity, height;\n}\n.swiper.swiper-cards {\n  overflow: visible;\n}\n.swiper-cards .swiper-slide {\n  transform-origin: center bottom;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  overflow: hidden;\n}\n`,"",{version:3,sources:["webpack://./node_modules/swiper/swiper-bundle.css"],names:[],mappings:"AAAA;;;;;;;;;;EAUE;;AAEF,eAAe;AACf;EACE,2BAA2B;EAC3B,4CAA6rE;EAC7rE,gBAAgB;EAChB,kBAAkB;AACpB;AACA,aAAa;AACb;EACE,6BAA6B;EAC7B;;;GAGC;AACH;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;EAChB,UAAU;EACV,6BAA6B;EAC7B,UAAU;EACV,cAAc;AAChB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,UAAU;EACV,aAAa;EACb,8BAA8B;EAC9B,qFAAqF;EACrF,uBAAuB;AACzB;AACA;;;EAGE,iCAAiC;AACnC;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,8BAA8B;EAC9B,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA,gBAAgB;AAChB;;EAEE,YAAY;AACd;AACA;EACE,uBAAuB;EACvB,sCAAsC;AACxC;AACA;EACE,wBAAwB;EACxB,mCAAmC;UAC3B,2BAA2B;AACrC;AACA,eAAe;AACf;EACE,mBAAmB;AACrB;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,4BAA4B;AAC9B;AACA,aAAa;AACb;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,wBAAwB;EACxB,mCAAmC;AACrC;AACA;EACE,aAAa;AACf;AACA;EACE,8BAA8B;AAChC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,WAAW;EACX,cAAc;EACd,WAAW;AACb;AACA;EACE,gCAAgC;EAChC,wBAAwB;AAC1B;AACA;EACE,yDAAyD;AAC3D;AACA;EACE,YAAY;EACZ,eAAe;EACf,0CAA0C;AAC5C;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,WAAW;EACX,cAAc;EACd,2CAA2C;AAC7C;AACA,uBAAuB;AACvB,eAAe;AACf;;;;;;;;;;EAUE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,+BAA+B;AACjC;AACA;EACE,gFAAgF;AAClF;AACA;EACE,iFAAiF;AACnF;AACA;EACE,+EAA+E;AACjF;AACA;EACE,kFAAkF;AACpF;AACA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,kBAAkB;EAClB,iBAAiB;EACjB,WAAW;EACX,qBAAqB;EACrB,sBAAsB;EACtB,0EAA0E;EAC1E,kBAAkB;EAClB,6BAA6B;AAC/B;AACA;;EAEE,mDAAmD;AACrD;AACA;EACE,8BAA8B;AAChC;AACA;EACE,8BAA8B;AAChC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;AACA,qBAAqB;AACrB;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,oBAAoB;AACtB;AACA;EACE,WAAW;EACX,iCAAiC;AACnC;AACA;EACE,UAAU;EACV,kCAAkC;AACpC;AACA;EACE,8BAA8B;EAC9B;;;;GAIC;AACH;AACA;;EAEE,kBAAkB;EAClB,6CAA6C;EAC7C,oDAAoD;EACpD,qCAAqC;EACrC,2DAA2D;EAC3D,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gEAAgE;AAClE;AACA;;EAEE,aAAa;EACb,YAAY;EACZ,oBAAoB;AACtB;AACA;;EAEE,UAAU;EACV,YAAY;EACZ,oBAAoB;AACtB;AACA;;EAEE,wBAAwB;AAC1B;AACA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,wBAAwB;AAC1B;AACA;;EAEE,yBAAyB;AAC3B;AACA;;EAEE,iDAAiD;EACjD,WAAW;AACb;AACA;;EAEE,kDAAkD;EAClD,UAAU;AACZ;AACA;EACE,aAAa;AACf;AACA,0BAA0B;AAC1B;;EAEE,yBAAyB;EACzB,wCAAwC;EACxC,+BAA+B;EAC/B,iBAAiB;EACjB,qBAAqB;EACrB,cAAc;AAChB;AACA;;EAEE,eAAe;AACjB;AACA;;EAEE,kDAAkD;EAClD,UAAU;AACZ;AACA;;EAEE,eAAe;AACjB;AACA,wBAAwB;AACxB;EACE;;;;;;;;;;;;;;;;;;GAkBC;AACH;AACA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;EACzB,+BAA+B;EAC/B,WAAW;AACb;AACA;EACE,UAAU;AACZ;AACA;;EAEE,wBAAwB;AAC1B;AACA,kBAAkB;AAClB;;;;EAIE,4CAA4C;EAC5C,uCAAuC;EACvC,OAAO;EACP,WAAW;AACb;AACA,YAAY;AACZ;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,sBAAsB;EACtB,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uFAAuF;EACvF,yFAAyF;EACzF,qBAAqB;EACrB,iEAAiE;EACjE,gEAAgE;EAChE,8DAA8D;AAChE;AACA;EACE,YAAY;EACZ,SAAS;EACT,UAAU;EACV,gBAAgB;EAChB,wBAAwB;UAChB,gBAAgB;AAC1B;AACA;EACE,eAAe;AACjB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,mDAAmD;EACnD,qEAAqE;AACvE;AACA;;EAEE,0CAA0C;EAC1C,yCAAyC;EACzC,QAAQ;EACR,oCAAoC;AACtC;AACA;;EAEE,2DAA2D;EAC3D,cAAc;AAChB;AACA;;EAEE,QAAQ;EACR,2BAA2B;EAC3B,UAAU;AACZ;AACA;;EAEE,qBAAqB;EACrB;iBACe;AACjB;AACA;;EAEE,6DAA6D;AAC/D;AACA;;EAEE,SAAS;EACT,2BAA2B;EAC3B,mBAAmB;AACrB;AACA;;EAEE;kBACgB;AAClB;AACA;EACE;eACa;AACf;AACA,aAAa;AACb;EACE,uDAAuD;AACzD;AACA,aAAa;AACb;EACE,8EAA8E;EAC9E,kBAAkB;AACpB;AACA;EACE,qEAAqE;EACrE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,0BAA0B;AAC5B;AACA;EACE,2BAA2B;AAC7B;AACA;;;;EAIE,WAAW;EACX,sDAAsD;EACtD,OAAO;EACP,MAAM;AACR;AACA;;;;EAIE,qDAAqD;EACrD,YAAY;EACZ,OAAO;EACP,MAAM;AACR;AACA;EACE,aAAa;AACf;AACA;EACE;;;;;;;;;;GAUC;AACH;AACA;EACE,0DAA0D;EAC1D,kBAAkB;EAClB,kBAAkB;EAClB,gEAAgE;AAClE;AACA;;EAEE,wBAAwB;AAC1B;AACA;;EAEE,kBAAkB;EAClB,8CAA8C;EAC9C,2CAA2C;EAC3C,sCAAsC;EACtC,WAAW;EACX,yCAAyC;EACzC,gEAAgE;AAClE;AACA;;EAEE,kBAAkB;EAClB,wCAAwC;EACxC,yCAAyC;EACzC,6CAA6C;EAC7C,WAAW;EACX,wCAAwC;EACxC,iEAAiE;AACnE;AACA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,qEAAqE;EACrE,0DAA0D;EAC1D,OAAO;EACP,MAAM;AACR;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;AACf;AACA,gCAAgC;AAChC;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;AACpB;AACA;;;EAGE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;AACrB;AACA,8BAA8B;AAC9B;EACE,YAAY;EACZ,kBAAkB;AACpB;AACA,SAAS;AACT;EACE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,oBAAoB;EACpB,UAAU;EACV,cAAc;AAChB;AACA;EACE,oCAAoC;EACpC,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;EACf,sBAAsB;AACxB;AACA;EACE,oCAAoC;AACtC;AACA;EACE,oBAAoB;EACpB,4BAA4B;AAC9B;AACA;EACE,oBAAoB;AACtB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,oBAAoB;AACtB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,oBAAoB;EACpB,mCAAmC;UAC3B,2BAA2B;EACnC,UAAU;EACV,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;EACX,YAAY;AACd;AACA;EACE,oBAAoB;AACtB;AACA;EACE,wBAAwB;AAC1B;AACA;;EAEE,oBAAoB;AACtB;AACA;;;EAGE,oBAAoB;EACpB,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,OAAO;EACP,WAAW;EACX,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,UAAU;AACZ;AACA;EACE,WAAW;EACX,gBAAgB;EAChB,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,SAAS;EACT,QAAQ;EACR,kBAAkB;AACpB;AACA;EACE,oBAAoB;EACpB,mBAAmB;AACrB;AACA,6BAA6B;AAC7B;;;;EAIE,UAAU;EACV,mCAAmC;UAC3B,2BAA2B;AACrC;AACA,2BAA2B;AAC3B;EACE,iBAAiB;AACnB;AACA;EACE,oBAAoB;EACpB,mCAAmC;UAC3B,2BAA2B;EACnC,UAAU;AACZ;AACA;EACE,oBAAoB;AACtB;AACA;;EAEE,oBAAoB;AACtB;AACA,6BAA6B;AAC7B;;;;EAIE,UAAU;EACV,mCAAmC;UAC3B,2BAA2B;AACrC;AACA,2BAA2B;AAC3B;EACE,mCAAmC;UAC3B,2BAA2B;EACnC,gBAAgB;EAChB,+CAA+C;AACjD;AACA;EACE,iBAAiB;AACnB;AACA;EACE,+BAA+B;EAC/B,mCAAmC;UAC3B,2BAA2B;EACnC,gBAAgB;AAClB",sourcesContent:["/**\n * Swiper 11.2.8\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: May 23, 2025\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA');\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n.swiper-virtual .swiper-slide {\n  -webkit-backface-visibility: hidden;\n  transform: translateZ(0);\n}\n.swiper-virtual.swiper-css-mode .swiper-wrapper::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n}\n.swiper-virtual.swiper-css-mode.swiper-horizontal .swiper-wrapper::after {\n  height: 1px;\n  width: var(--swiper-virtual-size);\n}\n.swiper-virtual.swiper-css-mode.swiper-vertical .swiper-wrapper::after {\n  width: 1px;\n  height: var(--swiper-virtual-size);\n}\n:root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: var(--swiper-navigation-top-offset, 50%);\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev.swiper-button-hidden,\n.swiper-button-next.swiper-button-hidden {\n  opacity: 0;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-navigation-disabled .swiper-button-prev,\n.swiper-navigation-disabled .swiper-button-next {\n  display: none !important;\n}\n.swiper-button-prev svg,\n.swiper-button-next svg {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  transform-origin: center;\n}\n.swiper-rtl .swiper-button-prev svg,\n.swiper-rtl .swiper-button-next svg {\n  transform: rotate(180deg);\n}\n.swiper-button-prev,\n.swiper-rtl .swiper-button-next {\n  left: var(--swiper-navigation-sides-offset, 10px);\n  right: auto;\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-lock {\n  display: none;\n}\n/* Navigation font start */\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev:after,\n.swiper-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n/* Navigation font end */\n:root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n:root {\n  /*\n  --swiper-scrollbar-border-radius: 10px;\n  --swiper-scrollbar-top: auto;\n  --swiper-scrollbar-bottom: 4px;\n  --swiper-scrollbar-left: auto;\n  --swiper-scrollbar-right: 4px;\n  --swiper-scrollbar-sides-offset: 1%;\n  --swiper-scrollbar-bg-color: rgba(0, 0, 0, 0.1);\n  --swiper-scrollbar-drag-bg-color: rgba(0, 0, 0, 0.5);\n  --swiper-scrollbar-size: 4px;\n  */\n}\n.swiper-scrollbar {\n  border-radius: var(--swiper-scrollbar-border-radius, 10px);\n  position: relative;\n  touch-action: none;\n  background: var(--swiper-scrollbar-bg-color, rgba(0, 0, 0, 0.1));\n}\n.swiper-scrollbar-disabled > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-disabled {\n  display: none !important;\n}\n.swiper-horizontal > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-horizontal {\n  position: absolute;\n  left: var(--swiper-scrollbar-sides-offset, 1%);\n  bottom: var(--swiper-scrollbar-bottom, 4px);\n  top: var(--swiper-scrollbar-top, auto);\n  z-index: 50;\n  height: var(--swiper-scrollbar-size, 4px);\n  width: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 1%));\n}\n.swiper-vertical > .swiper-scrollbar,\n.swiper-scrollbar.swiper-scrollbar-vertical {\n  position: absolute;\n  left: var(--swiper-scrollbar-left, auto);\n  right: var(--swiper-scrollbar-right, 4px);\n  top: var(--swiper-scrollbar-sides-offset, 1%);\n  z-index: 50;\n  width: var(--swiper-scrollbar-size, 4px);\n  height: calc(100% - 2 * var(--swiper-scrollbar-sides-offset, 1%));\n}\n.swiper-scrollbar-drag {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  background: var(--swiper-scrollbar-drag-bg-color, rgba(0, 0, 0, 0.5));\n  border-radius: var(--swiper-scrollbar-border-radius, 10px);\n  left: 0;\n  top: 0;\n}\n.swiper-scrollbar-cursor-drag {\n  cursor: move;\n}\n.swiper-scrollbar-lock {\n  display: none;\n}\n/* Zoom container styles start */\n.swiper-zoom-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n.swiper-zoom-container > img,\n.swiper-zoom-container > svg,\n.swiper-zoom-container > canvas {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n}\n/* Zoom container styles end */\n.swiper-slide-zoomed {\n  cursor: move;\n  touch-action: none;\n}\n/* a11y */\n.swiper .swiper-notification {\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  opacity: 0;\n  z-index: -1000;\n}\n.swiper-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n.swiper-grid > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n.swiper-grid-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n.swiper-fade.swiper-free-mode .swiper-slide {\n  transition-timing-function: ease-out;\n}\n.swiper-fade .swiper-slide {\n  pointer-events: none;\n  transition-property: opacity;\n}\n.swiper-fade .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-fade .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-fade .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper.swiper-cube {\n  overflow: visible;\n}\n.swiper-cube .swiper-slide {\n  pointer-events: none;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  z-index: 1;\n  visibility: hidden;\n  transform-origin: 0 0;\n  width: 100%;\n  height: 100%;\n}\n.swiper-cube .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-cube.swiper-rtl .swiper-slide {\n  transform-origin: 100% 0;\n}\n.swiper-cube .swiper-slide-active,\n.swiper-cube .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-cube .swiper-slide-active,\n.swiper-cube .swiper-slide-next,\n.swiper-cube .swiper-slide-prev {\n  pointer-events: auto;\n  visibility: visible;\n}\n.swiper-cube .swiper-cube-shadow {\n  position: absolute;\n  left: 0;\n  bottom: 0px;\n  width: 100%;\n  height: 100%;\n  opacity: 0.6;\n  z-index: 0;\n}\n.swiper-cube .swiper-cube-shadow:before {\n  content: '';\n  background: #000;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  filter: blur(50px);\n}\n.swiper-cube .swiper-slide-next + .swiper-slide {\n  pointer-events: auto;\n  visibility: visible;\n}\n/* Cube slide shadows start */\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-top,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-bottom,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-left,\n.swiper-cube .swiper-slide-shadow-cube.swiper-slide-shadow-right {\n  z-index: 0;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* Cube slide shadows end */\n.swiper.swiper-flip {\n  overflow: visible;\n}\n.swiper-flip .swiper-slide {\n  pointer-events: none;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  z-index: 1;\n}\n.swiper-flip .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-flip .swiper-slide-active,\n.swiper-flip .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n/* Flip slide shadows start */\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-top,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-bottom,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-left,\n.swiper-flip .swiper-slide-shadow-flip.swiper-slide-shadow-right {\n  z-index: 0;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* Flip slide shadows end */\n.swiper-creative .swiper-slide {\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  overflow: hidden;\n  transition-property: transform, opacity, height;\n}\n.swiper.swiper-cards {\n  overflow: visible;\n}\n.swiper-cards .swiper-slide {\n  transform-origin: center bottom;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  overflow: hidden;\n}\n"],sourceRoot:""}]);const u=p},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(i){!function(e,t,i){var s="";i.supports&&(s+="@supports (".concat(i.supports,") {")),i.media&&(s+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(s+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),s+=i.css,r&&(s+="}"),i.media&&(s+="}"),i.supports&&(s+="}");var n=i.sourceMap;n&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),t.styleTagTransform(s,e,t.options)}(t,e,i)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={id:s,exports:{}};return e[s](n,n.exports,i),n.exports}i.m=e,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.b=document.baseURI||self.location.href,i.nc=void 0;var s=Object.defineProperty,r=(e,t,i)=>(((e,t,i)=>{t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i})(e,"symbol"!=typeof t?t+"":t,i),i);const n=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,a=/^-?[0-9]\d*$/,o=/^(?=.*[A-Za-z])(?=.*\d).{8,}$/,l=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,d=e=>"string"!=typeof e||""===e;var p=(e=>(e.Required="required",e.Email="email",e.MinLength="minLength",e.MaxLength="maxLength",e.Password="password",e.Number="number",e.Integer="integer",e.MaxNumber="maxNumber",e.MinNumber="minNumber",e.StrongPassword="strongPassword",e.CustomRegexp="customRegexp",e.MinFilesCount="minFilesCount",e.MaxFilesCount="maxFilesCount",e.Files="files",e))(p||{}),c=(e=>(e.Required="required",e))(c||{}),u=(e=>(e.Label="label",e.LabelArrow="labelArrow",e))(u||{});const h=[{key:p.Required,dict:{en:"The field is required"}},{key:p.Email,dict:{en:"Email has invalid format"}},{key:p.MaxLength,dict:{en:"The field must contain a maximum of :value characters"}},{key:p.MinLength,dict:{en:"The field must contain a minimum of :value characters"}},{key:p.Password,dict:{en:"Password must contain minimum eight characters, at least one letter and one number"}},{key:p.StrongPassword,dict:{en:"Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character"}},{key:p.Number,dict:{en:"Value should be a number"}},{key:p.MaxNumber,dict:{en:"Number should be less or equal than :value"}},{key:p.MinNumber,dict:{en:"Number should be more or equal than :value"}},{key:p.MinFilesCount,dict:{en:"Files count should be more or equal than :value"}},{key:p.MaxFilesCount,dict:{en:"Files count should be less or equal than :value"}},{key:p.Files,dict:{en:"Uploaded files have one or several invalid properties (extension/size/type etc)."}}],m=e=>"object"==typeof e&&null!==e&&"then"in e&&"function"==typeof e.then,A=e=>Array.isArray(e)?e.filter((e=>e.length>0)):"string"==typeof e&&e.trim()?[...e.split(" ").filter((e=>e.length>0))]:[],f=e=>e instanceof Element||e instanceof HTMLDocument,g={errorFieldStyle:{color:"#b81111",border:"1px solid #B81111"},errorFieldCssClass:"just-validate-error-field",successFieldCssClass:"just-validate-success-field",errorLabelStyle:{color:"#b81111"},errorLabelCssClass:"just-validate-error-label",successLabelCssClass:"just-validate-success-label",focusInvalidField:!0,lockForm:!0,testingMode:!1,validateBeforeSubmitting:!1,submitFormAutomatically:!1};function w(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function v(e,t){void 0===e&&(e={}),void 0===t&&(t={});const i=["__proto__","constructor","prototype"];Object.keys(t).filter((e=>i.indexOf(e)<0)).forEach((i=>{void 0===e[i]?e[i]=t[i]:w(t[i])&&w(e[i])&&Object.keys(t[i]).length>0&&v(e[i],t[i])}))}const b={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function E(){const e="undefined"!=typeof document?document:{};return v(e,b),e}const C={document:b,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function y(){const e="undefined"!=typeof window?window:{};return v(e,C),e}function x(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function S(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function B(){return Date.now()}function M(e,t){void 0===t&&(t="x");const i=y();let s,r,n;const a=function(e){const t=y();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(r=a.transform||a.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new i.WebKitCSSMatrix("none"===r?"":r)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=n.toString().split(",")),"x"===t&&(r=i.WebKitCSSMatrix?n.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===t&&(r=i.WebKitCSSMatrix?n.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),r||0}function T(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function k(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let s=1;s<arguments.length;s+=1){const r=s<0||arguments.length<=s?void 0:arguments[s];if(null!=r&&(i=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?i instanceof HTMLElement:i&&(1===i.nodeType||11===i.nodeType)))){const i=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,s=i.length;t<s;t+=1){const s=i[t],n=Object.getOwnPropertyDescriptor(r,s);void 0!==n&&n.enumerable&&(T(e[s])&&T(r[s])?r[s].__swiper__?e[s]=r[s]:k(e[s],r[s]):!T(e[s])&&T(r[s])?(e[s]={},r[s].__swiper__?e[s]=r[s]:k(e[s],r[s])):e[s]=r[s])}}}var i;return e}function L(e,t,i){e.style.setProperty(t,i)}function z(e){let{swiper:t,targetPosition:i,side:s}=e;const r=y(),n=-t.translate;let a,o=null;const l=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const d=i>n?"next":"prev",p=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,c=()=>{a=(new Date).getTime(),null===o&&(o=a);const e=Math.max(Math.min((a-o)/l,1),0),d=.5-Math.cos(e*Math.PI)/2;let u=n+d*(i-n);if(p(u,i)&&(u=i),t.wrapperEl.scrollTo({[s]:u}),p(u,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[s]:u})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(c)};c()}function P(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function F(e,t){void 0===t&&(t="");const i=y(),s=[...e.children];return i.HTMLSlotElement&&e instanceof HTMLSlotElement&&s.push(...e.assignedElements()),t?s.filter((e=>e.matches(t))):s}function I(e){try{return void console.warn(e)}catch(e){}}function D(e,t){void 0===t&&(t=[]);const i=document.createElement(e);return i.classList.add(...Array.isArray(t)?t:x(t)),i}function O(e){const t=y(),i=E(),s=e.getBoundingClientRect(),r=i.body,n=e.clientTop||r.clientTop||0,a=e.clientLeft||r.clientLeft||0,o=e===t?t.scrollY:e.scrollTop,l=e===t?t.scrollX:e.scrollLeft;return{top:s.top+o-n,left:s.left+l-a}}function Y(e,t){return y().getComputedStyle(e,null).getPropertyValue(t)}function $(e){let t,i=e;if(i){for(t=0;null!==(i=i.previousSibling);)1===i.nodeType&&(t+=1);return t}}function G(e,t){const i=[];let s=e.parentElement;for(;s;)t?s.matches(t)&&i.push(s):i.push(s),s=s.parentElement;return i}function N(e,t){t&&e.addEventListener("transitionend",(function i(s){s.target===e&&(t.call(e,s),e.removeEventListener("transitionend",i))}))}function V(e,t,i){const s=y();return i?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function j(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}function R(e){return t=>Math.abs(t)>0&&e.browser&&e.browser.need3dFix&&Math.abs(t)%90==0?t+.001:t}function q(e,t){void 0===t&&(t=""),"undefined"!=typeof trustedTypes?e.innerHTML=trustedTypes.createPolicy("html",{createHTML:e=>e}).createHTML(t):e.innerHTML=t}let X,W,H;function U(){return X||(X=function(){const e=y(),t=E();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),X}function _(e){return void 0===e&&(e={}),W||(W=function(e){let{userAgent:t}=void 0===e?{}:e;const i=U(),s=y(),r=s.navigator.platform,n=t||s.navigator.userAgent,a={ios:!1,android:!1},o=s.screen.width,l=s.screen.height,d=n.match(/(Android);?[\s\/]+([\d.]+)?/);let p=n.match(/(iPad).*OS\s([\d_]+)/);const c=n.match(/(iPod)(.*OS\s([\d_]+))?/),u=!p&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let m="MacIntel"===r;return!p&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${l}`)>=0&&(p=n.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),m=!1),d&&!h&&(a.os="android",a.android=!0),(p||u||c)&&(a.os="ios",a.ios=!0),a}(e)),W}function Z(){return H||(H=function(){const e=y(),t=_();let i=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,s]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));i=e<16||16===e&&s<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=s();return{isSafari:i||n,needPerspectiveFix:i,need3dFix:n||r&&t.ios,isWebView:r}}()),H}var Q={on(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;const r=i?"unshift":"push";return e.split(" ").forEach((e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][r](t)})),s},once(e,t,i){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof t)return s;function r(){s.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];t.apply(s,n)}return r.__emitterProxy=t,s.on(e,r,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const s=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[s](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach(((s,r)=>{(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&i.eventsListeners[e].splice(r,1)}))})),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,s;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];return"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],i=n.slice(1,n.length),s=e):(t=n[0].events,i=n[0].data,s=n[0].context||e),i.unshift(s),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(s,[t,...i])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(s,i)}))})),e}};const K=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)},J=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)},ee=(e,t)=>{if(!e||e.destroyed||!e.params)return;const i=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(i){let t=i.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(i.shadowRoot?t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{i.shadowRoot&&(t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},te=(e,t)=>{if(!e.slides[t])return;const i=e.slides[t].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},ie=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const i=e.slides.length;if(!i||!t||t<0)return;t=Math.min(t,i);const s="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const i=r,n=[i-t];return n.push(...Array.from({length:t}).map(((e,t)=>i+s+t))),void e.slides.forEach(((t,i)=>{n.includes(t.column)&&te(e,i)}))}const n=r+s-1;if(e.params.rewind||e.params.loop)for(let s=r-t;s<=n+t;s+=1){const t=(s%i+i)%i;(t<r||t>n)&&te(e,t)}else for(let s=Math.max(r-t,0);s<=Math.min(n+t,i-1);s+=1)s!==r&&(s>n||s<r)&&te(e,s)};var se={updateSize:function(){const e=this;let t,i;const s=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:s.clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:s.clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(Y(s,"padding-left")||0,10)-parseInt(Y(s,"padding-right")||0,10),i=i-parseInt(Y(s,"padding-top")||0,10)-parseInt(Y(s,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t,i){return parseFloat(t.getPropertyValue(e.getDirectionLabel(i))||0)}const i=e.params,{wrapperEl:s,slidesEl:r,size:n,rtlTranslate:a,wrongRTL:o}=e,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,p=F(r,`.${e.params.slideClass}, swiper-slide`),c=l?e.virtual.slides.length:p.length;let u=[];const h=[],m=[];let A=i.slidesOffsetBefore;"function"==typeof A&&(A=i.slidesOffsetBefore.call(e));let f=i.slidesOffsetAfter;"function"==typeof f&&(f=i.slidesOffsetAfter.call(e));const g=e.snapGrid.length,w=e.slidesGrid.length;let v=i.spaceBetween,b=-A,E=0,C=0;if(void 0===n)return;"string"==typeof v&&v.indexOf("%")>=0?v=parseFloat(v.replace("%",""))/100*n:"string"==typeof v&&(v=parseFloat(v)),e.virtualSize=-v,p.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(L(s,"--swiper-centered-offset-before",""),L(s,"--swiper-centered-offset-after",""));const y=i.grid&&i.grid.rows>1&&e.grid;let x;y?e.grid.initSlides(p):e.grid&&e.grid.unsetSlides();const S="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let s=0;s<c;s+=1){let r;if(x=0,p[s]&&(r=p[s]),y&&e.grid.updateSlide(s,r,p),!p[s]||"none"!==Y(r,"display")){if("auto"===i.slidesPerView){S&&(p[s].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),a=r.style.transform,o=r.style.webkitTransform;if(a&&(r.style.transform="none"),o&&(r.style.webkitTransform="none"),i.roundLengths)x=e.isHorizontal()?V(r,"width",!0):V(r,"height",!0);else{const e=t(n,"width"),i=t(n,"padding-left"),s=t(n,"padding-right"),a=t(n,"margin-left"),o=t(n,"margin-right"),l=n.getPropertyValue("box-sizing");if(l&&"border-box"===l)x=e+a+o;else{const{clientWidth:t,offsetWidth:n}=r;x=e+i+s+a+o+(n-t)}}a&&(r.style.transform=a),o&&(r.style.webkitTransform=o),i.roundLengths&&(x=Math.floor(x))}else x=(n-(i.slidesPerView-1)*v)/i.slidesPerView,i.roundLengths&&(x=Math.floor(x)),p[s]&&(p[s].style[e.getDirectionLabel("width")]=`${x}px`);p[s]&&(p[s].swiperSlideSize=x),m.push(x),i.centeredSlides?(b=b+x/2+E/2+v,0===E&&0!==s&&(b=b-n/2-v),0===s&&(b=b-n/2-v),Math.abs(b)<.001&&(b=0),i.roundLengths&&(b=Math.floor(b)),C%i.slidesPerGroup===0&&u.push(b),h.push(b)):(i.roundLengths&&(b=Math.floor(b)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup===0&&u.push(b),h.push(b),b=b+x+v),e.virtualSize+=x+v,E=x,C+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+f,a&&o&&("slide"===i.effect||"coverflow"===i.effect)&&(s.style.width=`${e.virtualSize+v}px`),i.setWrapperSize&&(s.style[e.getDirectionLabel("width")]=`${e.virtualSize+v}px`),y&&e.grid.updateWrapperSize(x,u),!i.centeredSlides){const t=[];for(let s=0;s<u.length;s+=1){let r=u[s];i.roundLengths&&(r=Math.floor(r)),u[s]<=e.virtualSize-n&&t.push(r)}u=t,Math.floor(e.virtualSize-n)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-n)}if(l&&i.loop){const t=m[0]+v;if(i.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),r=t*i.slidesPerGroup;for(let e=0;e<s;e+=1)u.push(u[u.length-1]+r)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===i.slidesPerGroup&&u.push(u[u.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==v){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");p.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==p.length-1)).forEach((e=>{e.style[t]=`${v}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(v||0)})),e-=v;const t=e>n?e-n:0;u=u.map((e=>e<=0?-A:e>t?t+f:e))}if(i.centerInsufficientSlides){let e=0;m.forEach((t=>{e+=t+(v||0)})),e-=v;const t=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(e+t<n){const i=(n-e-t)/2;u.forEach(((e,t)=>{u[t]=e-i})),h.forEach(((e,t)=>{h[t]=e+i}))}}if(Object.assign(e,{slides:p,snapGrid:u,slidesGrid:h,slidesSizesGrid:m}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){L(s,"--swiper-centered-offset-before",-u[0]+"px"),L(s,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+i))}if(c!==d&&e.emit("slidesLengthChange"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==w&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);c<=i.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,i=[],s=t.virtual&&t.params.virtual.enabled;let r,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>s?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{i.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!s)break;i.push(a(e))}else i.push(a(t.activeIndex));for(r=0;r<i.length;r+=1)if(void 0!==i[r]){const e=i[r].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,i=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let s=0;s<t.length;s+=1)t[s].swiperSlideOffset=(e.isHorizontal()?t[s].offsetLeft:t[s].offsetTop)-i-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:s,rtlTranslate:r,snapGrid:n}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;r&&(a=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=i.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<s.length;e+=1){const l=s[e];let d=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=s[0].swiperSlideOffset);const p=(a+(i.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),c=(a-n[0]+(i.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+o),u=-(a-d),h=u+t.slidesSizesGrid[e],m=u>=0&&u<=t.size-t.slidesSizesGrid[e],A=u>=0&&u<t.size-1||h>1&&h<=t.size||u<=0&&h>=t.size;A&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e)),K(l,A,i.slideVisibleClass),K(l,m,i.slideFullyVisibleClass),l.progress=r?-p:p,l.originalProgress=r?-c:c}},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:n,isEnd:a,progressLoop:o}=t;const l=n,d=a;if(0===s)r=0,n=!0,a=!0;else{r=(e-t.minTranslate())/s;const i=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;n=i||r<=0,a=o||r>=1,i&&(r=0),o&&(r=1)}if(i.loop){const i=t.getSlideIndexByData(0),s=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[i],n=t.slidesGrid[s],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=r?(l-r)/a:(l+a-n)/a,o>1&&(o-=1)}Object.assign(t,{progress:r,progressLoop:o,isBeginning:n,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit("reachBeginning toEdge"),a&&!d&&t.emit("reachEnd toEdge"),(l&&!n||d&&!a)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,slidesEl:s,activeIndex:r}=e,n=e.virtual&&i.virtual.enabled,a=e.grid&&i.grid&&i.grid.rows>1,o=e=>F(s,`.${i.slideClass}${e}, swiper-slide${e}`)[0];let l,d,p;if(n)if(i.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=o(`[data-swiper-slide-index="${t}"]`)}else l=o(`[data-swiper-slide-index="${r}"]`);else a?(l=t.find((e=>e.column===r)),p=t.find((e=>e.column===r+1)),d=t.find((e=>e.column===r-1))):l=t[r];l&&(a||(p=function(e,t){const i=[];for(;e.nextElementSibling;){const s=e.nextElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!p&&(p=t[0]),d=function(e,t){const i=[];for(;e.previousElementSibling;){const s=e.previousElementSibling;t?s.matches(t)&&i.push(s):i.push(s),e=s}return i}(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{J(e,e===l,i.slideActiveClass),J(e,e===p,i.slideNextClass),J(e,e===d,i.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{snapGrid:s,params:r,activeIndex:n,realIndex:a,snapIndex:o}=t;let l,d=e;const p=e=>{let i=e-t.virtual.slidesBefore;return i<0&&(i=t.virtual.slides.length+i),i>=t.virtual.slides.length&&(i-=t.virtual.slides.length),i};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:i}=e,s=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?s>=t[e]&&s<t[e+1]-(t[e+1]-t[e])/2?r=e:s>=t[e]&&s<t[e+1]&&(r=e+1):s>=t[e]&&(r=e);return i.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),s.indexOf(i)>=0)l=s.indexOf(i);else{const e=Math.min(r.slidesPerGroupSkip,d);l=e+Math.floor((d-e)/r.slidesPerGroup)}if(l>=s.length&&(l=s.length-1),d===n&&!t.params.loop)return void(l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")));if(d===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=p(d));const c=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=p(d);else if(c){const e=t.slides.find((e=>e.column===d));let i=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(t.slides.indexOf(e),0)),u=Math.floor(i/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:u,previousIndex:n,activeIndex:d}),t.initialized&&ie(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const i=this,s=i.params;let r=e.closest(`.${s.slideClass}, swiper-slide`);!r&&i.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${s.slideClass}, swiper-slide`)&&(r=e)}));let n,a=!1;if(r)for(let e=0;e<i.slides.length;e+=1)if(i.slides[e]===r){a=!0,n=e;break}if(!r||!a)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=r,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=n,s.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}},re={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:s,wrapperEl:r}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let n=M(r,e);return n+=this.cssOverflowAdjustment(),i&&(n=-n),n||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:r,wrapperEl:n,progress:a}=i;let o,l=0,d=0;i.isHorizontal()?l=s?-e:e:d=e,r.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:d,r.cssMode?n[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-d:r.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():d-=i.cssOverflowAdjustment(),n.style.transform=`translate3d(${l}px, ${d}px, 0px)`);const p=i.maxTranslate()-i.minTranslate();o=0===p?0:(e-i.minTranslate())/p,o!==a&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);const n=this,{params:a,wrapperEl:o}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const l=n.minTranslate(),d=n.maxTranslate();let p;if(p=s&&e>l?l:s&&e<d?d:e,n.updateProgress(p),a.cssMode){const e=n.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-p;else{if(!n.support.smoothScroll)return z({swiper:n,targetPosition:-p,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(p),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(p),i&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,i&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function ne(e){let{swiper:t,runCallbacks:i,direction:s,step:r}=e;const{activeIndex:n,previousIndex:a}=t;let o=s;o||(o=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${r}`),i&&"reset"===o?t.emit(`slideResetTransition${r}`):i&&n!==a&&(t.emit(`slideChangeTransition${r}`),"next"===o?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`))}var ae={setTransition:function(e,t){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${e}ms`,i.wrapperEl.style.transitionDelay=0===e?"0ms":""),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),ne({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:s}=i;i.animating=!1,s.cssMode||(i.setTransition(0),ne({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},oe={slideTo:function(e,t,i,s,r){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let a=e;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:d,previousIndex:p,activeIndex:c,rtlTranslate:u,wrapperEl:h,enabled:m}=n;if(!m&&!s&&!r||n.destroyed||n.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const A=Math.min(n.params.slidesPerGroupSkip,a);let f=A+Math.floor((a-A)/n.params.slidesPerGroup);f>=l.length&&(f=l.length-1);const g=-l[f];if(o.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*g),i=Math.floor(100*d[e]),s=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=i&&t<s-(s-i)/2?a=e:t>=i&&t<s&&(a=e+1):t>=i&&(a=e)}if(n.initialized&&a!==c){if(!n.allowSlideNext&&(u?g>n.translate&&g>n.minTranslate():g<n.translate&&g<n.minTranslate()))return!1;if(!n.allowSlidePrev&&g>n.translate&&g>n.maxTranslate()&&(c||0)!==a)return!1}let w;a!==(p||0)&&i&&n.emit("beforeSlideChangeStart"),n.updateProgress(g),w=a>c?"next":a<c?"prev":"reset";const v=n.virtual&&n.params.virtual.enabled;if((!v||!r)&&(u&&-g===n.translate||!u&&g===n.translate))return n.updateActiveIndex(a),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(g),"reset"!==w&&(n.transitionStart(i,w),n.transitionEnd(i,w)),!1;if(o.cssMode){const e=n.isHorizontal(),i=u?g:-g;if(0===t)v&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),v&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=i}))):h[e?"scrollLeft":"scrollTop"]=i,v&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}));else{if(!n.support.smoothScroll)return z({swiper:n,targetPosition:i,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}const b=Z().isSafari;return v&&!r&&b&&n.isElement&&n.virtual.update(!1,!1,a),n.setTransition(t),n.setTranslate(g),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,w),0===t?n.transitionEnd(i,w):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,w))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,s){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const n=r.grid&&r.params.grid&&r.params.grid.rows>1;let a=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)a+=r.virtual.slidesBefore;else{let e;if(n){const t=a*r.params.grid.rows;e=r.slides.find((e=>1*e.getAttribute("data-swiper-slide-index")===t)).column}else e=r.getSlideIndexByData(a);const t=n?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:i}=r.params;let o=r.params.slidesPerView;"auto"===o?o=r.slidesPerViewDynamic():(o=Math.ceil(parseFloat(r.params.slidesPerView,10)),i&&o%2==0&&(o+=1));let l=t-e<o;if(i&&(l=l||e<Math.ceil(o/2)),s&&i&&"auto"!==r.params.slidesPerView&&!n&&(l=!1),l){const s=i?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:s,slideTo:!0,activeSlideIndex:"next"===s?e+1:e-t+1,slideRealIndex:"next"===s?r.realIndex:void 0})}if(n){const e=a*r.params.grid.rows;a=r.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)).column}else a=r.getSlideIndexByData(a)}return requestAnimationFrame((()=>{r.slideTo(a,t,i,s)})),r},slideNext:function(e,t,i){void 0===t&&(t=!0);const s=this,{enabled:r,params:n,animating:a}=s;if(!r||s.destroyed)return s;void 0===e&&(e=s.params.speed);let o=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(o=Math.max(s.slidesPerViewDynamic("current",!0),1));const l=s.activeIndex<n.slidesPerGroupSkip?1:o,d=s.virtual&&n.virtual.enabled;if(n.loop){if(a&&!d&&n.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{s.slideTo(s.activeIndex+l,e,t,i)})),!0}return n.rewind&&s.isEnd?s.slideTo(0,e,t,i):s.slideTo(s.activeIndex+l,e,t,i)},slidePrev:function(e,t,i){void 0===t&&(t=!0);const s=this,{params:r,snapGrid:n,slidesGrid:a,rtlTranslate:o,enabled:l,animating:d}=s;if(!l||s.destroyed)return s;void 0===e&&(e=s.params.speed);const p=s.virtual&&r.virtual.enabled;if(r.loop){if(d&&!p&&r.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=c(o?s.translate:-s.translate),h=n.map((e=>c(e))),m=r.freeMode&&r.freeMode.enabled;let A=n[h.indexOf(u)-1];if(void 0===A&&(r.cssMode||m)){let e;n.forEach(((t,i)=>{u>=t&&(e=i)})),void 0!==e&&(A=m?n[e]:n[e>0?e-1:e])}let f=0;if(void 0!==A&&(f=a.indexOf(A),f<0&&(f=s.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(f=f-s.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),r.rewind&&s.isBeginning){const r=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(r,e,t,i)}return r.loop&&0===s.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{s.slideTo(f,e,t,i)})),!0):s.slideTo(f,e,t,i)},slideReset:function(e,t,i){void 0===t&&(t=!0);const s=this;if(!s.destroyed)return void 0===e&&(e=s.params.speed),s.slideTo(s.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===t&&(t=!0),void 0===s&&(s=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let n=r.activeIndex;const a=Math.min(r.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/r.params.slidesPerGroup),l=r.rtlTranslate?r.translate:-r.translate;if(l>=r.snapGrid[o]){const e=r.snapGrid[o];l-e>(r.snapGrid[o+1]-e)*s&&(n+=r.params.slidesPerGroup)}else{const e=r.snapGrid[o-1];l-e<=(r.snapGrid[o]-e)*s&&(n-=r.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,r.slidesGrid.length-1),r.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-s/2||n>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),n=e.getSlideIndex(F(i,`${a}[data-swiper-slide-index="${r}"]`)[0]),S((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-s?(e.loopFix(),n=e.getSlideIndex(F(i,`${a}[data-swiper-slide-index="${r}"]`)[0]),S((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}},le={loopCreate:function(e,t){const i=this,{params:s,slidesEl:r}=i;if(!s.loop||i.virtual&&i.params.virtual.enabled)return;const n=()=>{F(r,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},a=i.grid&&s.grid&&s.grid.rows>1,o=s.slidesPerGroup*(a?s.grid.rows:1),l=i.slides.length%o!==0,d=a&&i.slides.length%s.grid.rows!==0,p=e=>{for(let t=0;t<e;t+=1){const e=i.isElement?D("swiper-slide",[s.slideBlankClass]):D("div",[s.slideClass,s.slideBlankClass]);i.slidesEl.append(e)}};l?(s.loopAddBlankSlides?(p(o-i.slides.length%o),i.recalcSlides(),i.updateSlides()):I("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),n()):d?(s.loopAddBlankSlides?(p(s.grid.rows-i.slides.length%s.grid.rows),i.recalcSlides(),i.updateSlides()):I("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),n()):n(),i.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next",initial:t})},loopFix:function(e){let{slideRealIndex:t,slideTo:i=!0,direction:s,setTranslate:r,activeSlideIndex:n,initial:a,byController:o,byMousewheel:l}=void 0===e?{}:e;const d=this;if(!d.params.loop)return;d.emit("beforeLoopFix");const{slides:p,allowSlidePrev:c,allowSlideNext:u,slidesEl:h,params:m}=d,{centeredSlides:A,initialSlide:f}=m;if(d.allowSlidePrev=!0,d.allowSlideNext=!0,d.virtual&&m.virtual.enabled)return i&&(m.centeredSlides||0!==d.snapIndex?m.centeredSlides&&d.snapIndex<m.slidesPerView?d.slideTo(d.virtual.slides.length+d.snapIndex,0,!1,!0):d.snapIndex===d.snapGrid.length-1&&d.slideTo(d.virtual.slidesBefore,0,!1,!0):d.slideTo(d.virtual.slides.length,0,!1,!0)),d.allowSlidePrev=c,d.allowSlideNext=u,void d.emit("loopFix");let g=m.slidesPerView;"auto"===g?g=d.slidesPerViewDynamic():(g=Math.ceil(parseFloat(m.slidesPerView,10)),A&&g%2==0&&(g+=1));const w=m.slidesPerGroupAuto?g:m.slidesPerGroup;let v=w;v%w!==0&&(v+=w-v%w),v+=m.loopAdditionalSlides,d.loopedSlides=v;const b=d.grid&&m.grid&&m.grid.rows>1;p.length<g+v||"cards"===d.params.effect&&p.length<g+2*v?I("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===m.grid.fill&&I("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const E=[],C=[],y=b?Math.ceil(p.length/m.grid.rows):p.length,x=a&&y-f<g&&!A;let S=x?f:d.activeIndex;void 0===n?n=d.getSlideIndex(p.find((e=>e.classList.contains(m.slideActiveClass)))):S=n;const B="next"===s||!s,M="prev"===s||!s;let T=0,k=0;const L=(b?p[n].column:n)+(A&&void 0===r?-g/2+.5:0);if(L<v){T=Math.max(v-L,w);for(let e=0;e<v-L;e+=1){const t=e-Math.floor(e/y)*y;if(b){const e=y-t-1;for(let t=p.length-1;t>=0;t-=1)p[t].column===e&&E.push(t)}else E.push(y-t-1)}}else if(L+g>y-v){k=Math.max(L-(y-2*v),w),x&&(k=Math.max(k,g-y+f+1));for(let e=0;e<k;e+=1){const t=e-Math.floor(e/y)*y;b?p.forEach(((e,i)=>{e.column===t&&C.push(i)})):C.push(t)}}if(d.__preventObserver__=!0,requestAnimationFrame((()=>{d.__preventObserver__=!1})),"cards"===d.params.effect&&p.length<g+2*v&&(C.includes(n)&&C.splice(C.indexOf(n),1),E.includes(n)&&E.splice(E.indexOf(n),1)),M&&E.forEach((e=>{p[e].swiperLoopMoveDOM=!0,h.prepend(p[e]),p[e].swiperLoopMoveDOM=!1})),B&&C.forEach((e=>{p[e].swiperLoopMoveDOM=!0,h.append(p[e]),p[e].swiperLoopMoveDOM=!1})),d.recalcSlides(),"auto"===m.slidesPerView?d.updateSlides():b&&(E.length>0&&M||C.length>0&&B)&&d.slides.forEach(((e,t)=>{d.grid.updateSlide(t,e,d.slides)})),m.watchSlidesProgress&&d.updateSlidesOffset(),i)if(E.length>0&&M){if(void 0===t){const e=d.slidesGrid[S],t=d.slidesGrid[S+T]-e;l?d.setTranslate(d.translate-t):(d.slideTo(S+Math.ceil(T),0,!1,!0),r&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else if(r){const e=b?E.length/m.grid.rows:E.length;d.slideTo(d.activeIndex+e,0,!1,!0),d.touchEventsData.currentTranslate=d.translate}}else if(C.length>0&&B)if(void 0===t){const e=d.slidesGrid[S],t=d.slidesGrid[S-k]-e;l?d.setTranslate(d.translate-t):(d.slideTo(S-k,0,!1,!0),r&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else{const e=b?C.length/m.grid.rows:C.length;d.slideTo(d.activeIndex-e,0,!1,!0)}if(d.allowSlidePrev=c,d.allowSlideNext=u,d.controller&&d.controller.control&&!o){const e={slideRealIndex:t,direction:s,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(d.controller.control)?d.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&i})})):d.controller.control instanceof d.constructor&&d.controller.control.params.loop&&d.controller.control.loopFix({...e,slideTo:d.controller.control.params.slidesPerView===m.slidesPerView&&i})}d.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:i}=e;if(!t.loop||!i||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const s=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;s[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),s.forEach((e=>{i.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},de={setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}};function pe(e,t,i){const s=y(),{params:r}=e,n=r.edgeSwipeDetection,a=r.edgeSwipeThreshold;return!n||!(i<=a||i>=s.innerWidth-a)||"prevent"===n&&(t.preventDefault(),!0)}function ce(e){const t=this,i=E();let s=e;s.originalEvent&&(s=s.originalEvent);const r=t.touchEventsData;if("pointerdown"===s.type){if(null!==r.pointerId&&r.pointerId!==s.pointerId)return;r.pointerId=s.pointerId}else"touchstart"===s.type&&1===s.targetTouches.length&&(r.touchId=s.targetTouches[0].identifier);if("touchstart"===s.type)return void pe(t,s,s.targetTouches[0].pageX);const{params:n,touches:a,enabled:o}=t;if(!o)return;if(!n.simulateTouch&&"mouse"===s.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let l=s.target;if("wrapper"===n.touchEventsTarget&&!function(e,t){const i=y();let s=t.contains(e);return!s&&i.HTMLSlotElement&&t instanceof HTMLSlotElement&&(s=[...t.assignedElements()].includes(e),s||(s=function(e,t){const i=[t];for(;i.length>0;){const t=i.shift();if(e===t)return!0;i.push(...t.children,...t.shadowRoot?t.shadowRoot.children:[],...t.assignedElements?t.assignedElements():[])}}(e,t))),s}(l,t.wrapperEl))return;if("which"in s&&3===s.which)return;if("button"in s&&s.button>0)return;if(r.isTouched&&r.isMoved)return;const d=!!n.noSwipingClass&&""!==n.noSwipingClass,p=s.composedPath?s.composedPath():s.path;d&&s.target&&s.target.shadowRoot&&p&&(l=p[0]);const c=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,u=!(!s.target||!s.target.shadowRoot);if(n.noSwiping&&(u?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===E()||i===y())return null;i.assignedSlot&&(i=i.assignedSlot);const s=i.closest(e);return s||i.getRootNode?s||t(i.getRootNode().host):null}(t)}(c,l):l.closest(c)))return void(t.allowClick=!0);if(n.swipeHandler&&!l.closest(n.swipeHandler))return;a.currentX=s.pageX,a.currentY=s.pageY;const h=a.currentX,m=a.currentY;if(!pe(t,s,h))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=h,a.startY=m,r.touchStartTime=B(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let A=!0;l.matches(r.focusableElements)&&(A=!1,"SELECT"===l.nodeName&&(r.isTouched=!1)),i.activeElement&&i.activeElement.matches(r.focusableElements)&&i.activeElement!==l&&("mouse"===s.pointerType||"mouse"!==s.pointerType&&!l.matches(r.focusableElements))&&i.activeElement.blur();const f=A&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!f||l.isContentEditable||s.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",s)}function ue(e){const t=E(),i=this,s=i.touchEventsData,{params:r,touches:n,rtlTranslate:a,enabled:o}=i;if(!o)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let l,d=e;if(d.originalEvent&&(d=d.originalEvent),"pointermove"===d.type){if(null!==s.touchId)return;if(d.pointerId!==s.pointerId)return}if("touchmove"===d.type){if(l=[...d.changedTouches].find((e=>e.identifier===s.touchId)),!l||l.identifier!==s.touchId)return}else l=d;if(!s.isTouched)return void(s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",d));const p=l.pageX,c=l.pageY;if(d.preventedByNestedSwiper)return n.startX=p,void(n.startY=c);if(!i.allowTouchMove)return d.target.matches(s.focusableElements)||(i.allowClick=!1),void(s.isTouched&&(Object.assign(n,{startX:p,startY:c,currentX:p,currentY:c}),s.touchStartTime=B()));if(r.touchReleaseOnEdges&&!r.loop)if(i.isVertical()){if(c<n.startY&&i.translate<=i.maxTranslate()||c>n.startY&&i.translate>=i.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else{if(a&&(p>n.startX&&-i.translate<=i.maxTranslate()||p<n.startX&&-i.translate>=i.minTranslate()))return;if(!a&&(p<n.startX&&i.translate<=i.maxTranslate()||p>n.startX&&i.translate>=i.minTranslate()))return}if(t.activeElement&&t.activeElement.matches(s.focusableElements)&&t.activeElement!==d.target&&"mouse"!==d.pointerType&&t.activeElement.blur(),t.activeElement&&d.target===t.activeElement&&d.target.matches(s.focusableElements))return s.isMoved=!0,void(i.allowClick=!1);s.allowTouchCallbacks&&i.emit("touchMove",d),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=p,n.currentY=c;const u=n.currentX-n.startX,h=n.currentY-n.startY;if(i.params.threshold&&Math.sqrt(u**2+h**2)<i.params.threshold)return;if(void 0===s.isScrolling){let e;i.isHorizontal()&&n.currentY===n.startY||i.isVertical()&&n.currentX===n.startX?s.isScrolling=!1:u*u+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,s.isScrolling=i.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",d),void 0===s.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(s.startMoving=!0)),s.isScrolling||"touchmove"===d.type&&s.preventTouchMoveFromPointerMove)return void(s.isTouched=!1);if(!s.startMoving)return;i.allowClick=!1,!r.cssMode&&d.cancelable&&d.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&d.stopPropagation();let m=i.isHorizontal()?u:h,A=i.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(m=Math.abs(m)*(a?1:-1),A=Math.abs(A)*(a?1:-1)),n.diff=m,m*=r.touchRatio,a&&(m=-m,A=-A);const f=i.touchesDirection;i.swipeDirection=m>0?"prev":"next",i.touchesDirection=A>0?"prev":"next";const g=i.params.loop&&!r.cssMode,w="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!s.isMoved){if(g&&w&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(e)}s.allowMomentumBounce=!1,!r.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",d)}if((new Date).getTime(),!1!==r._loopSwapReset&&s.isMoved&&s.allowThresholdMove&&f!==i.touchesDirection&&g&&w&&Math.abs(m)>=1)return Object.assign(n,{startX:p,startY:c,currentX:p,currentY:c,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,void(s.startTranslate=s.currentTranslate);i.emit("sliderMove",d),s.isMoved=!0,s.currentTranslate=m+s.startTranslate;let v=!0,b=r.resistanceRatio;if(r.touchReleaseOnEdges&&(b=0),m>0?(g&&w&&s.allowThresholdMove&&s.currentTranslate>(r.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]-("auto"!==r.slidesPerView&&i.slides.length-r.slidesPerView>=2?i.slidesSizesGrid[i.activeIndex+1]+i.params.spaceBetween:0)-i.params.spaceBetween:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(v=!1,r.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+m)**b))):m<0&&(g&&w&&s.allowThresholdMove&&s.currentTranslate<(r.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween+("auto"!==r.slidesPerView&&i.slides.length-r.slidesPerView>=2?i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween:0):i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===r.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(v=!1,r.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-m)**b))),v&&(d.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),i.allowSlidePrev||i.allowSlideNext||(s.currentTranslate=s.startTranslate),r.threshold>0){if(!(Math.abs(m)>r.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,s.currentTranslate=s.startTranslate,void(n.diff=i.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&i.freeMode||r.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function he(e){const t=this,i=t.touchEventsData;let s,r=e;if(r.originalEvent&&(r=r.originalEvent),"touchend"===r.type||"touchcancel"===r.type){if(s=[...r.changedTouches].find((e=>e.identifier===i.touchId)),!s||s.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(r.pointerId!==i.pointerId)return;s=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&(!["pointercancel","contextmenu"].includes(r.type)||!t.browser.isSafari&&!t.browser.isWebView))return;i.pointerId=null,i.touchId=null;const{params:n,touches:a,rtlTranslate:o,slidesGrid:l,enabled:d}=t;if(!d)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(i.allowTouchCallbacks&&t.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=B(),c=p-i.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),c<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(i.lastClickTime=B(),S((()=>{t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let u;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=n.followFinger?o?t.translate:-t.translate:-i.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});const h=u>=-t.maxTranslate()&&!t.params.loop;let m=0,A=t.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==l[e+t]?(h||u>=l[e]&&u<l[e+t])&&(m=e,A=l[e+t]-l[e]):(h||u>=l[e])&&(m=e,A=l[l.length-1]-l[l.length-2])}let f=null,g=null;n.rewind&&(t.isBeginning?g=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const w=(u-l[m])/A,v=m<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(c>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?f:m+v):t.slideTo(m)),"prev"===t.swipeDirection&&(w>1-n.longSwipesRatio?t.slideTo(m+v):null!==g&&w<0&&Math.abs(w)>n.longSwipesRatio?t.slideTo(g):t.slideTo(m))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||r.target!==t.navigation.nextEl&&r.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==f?f:m+v),"prev"===t.swipeDirection&&t.slideTo(null!==g?g:m)):r.target===t.navigation.nextEl?t.slideTo(m+v):t.slideTo(m)}}function me(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:r,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=s,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function Ae(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function fe(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:s}=e;if(!s)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();r=0===n?0:(e.translate-e.minTranslate())/n,r!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function ge(e){const t=this;ee(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function we(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const ve=(e,t)=>{const i=E(),{params:s,el:r,wrapperEl:n,device:a}=e,o=!!s.nested,l="on"===t?"addEventListener":"removeEventListener",d=t;r&&"string"!=typeof r&&(i[l]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),r[l]("touchstart",e.onTouchStart,{passive:!1}),r[l]("pointerdown",e.onTouchStart,{passive:!1}),i[l]("touchmove",e.onTouchMove,{passive:!1,capture:o}),i[l]("pointermove",e.onTouchMove,{passive:!1,capture:o}),i[l]("touchend",e.onTouchEnd,{passive:!0}),i[l]("pointerup",e.onTouchEnd,{passive:!0}),i[l]("pointercancel",e.onTouchEnd,{passive:!0}),i[l]("touchcancel",e.onTouchEnd,{passive:!0}),i[l]("pointerout",e.onTouchEnd,{passive:!0}),i[l]("pointerleave",e.onTouchEnd,{passive:!0}),i[l]("contextmenu",e.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&r[l]("click",e.onClick,!0),s.cssMode&&n[l]("scroll",e.onScroll),s.updateOnWindowResize?e[d](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",me,!0):e[d]("observerUpdate",me,!0),r[l]("load",e.onLoad,{capture:!0}))};var be={attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=ce.bind(e),e.onTouchMove=ue.bind(e),e.onTouchEnd=he.bind(e),e.onDocumentTouchStart=we.bind(e),t.cssMode&&(e.onScroll=fe.bind(e)),e.onClick=Ae.bind(e),e.onLoad=ge.bind(e),ve(e,"on")},detachEvents:function(){ve(this,"off")}};const Ee=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var Ce={setBreakpoint:function(){const e=this,{realIndex:t,initialized:i,params:s,el:r}=e,n=s.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const a=E(),o="window"!==s.breakpointsBase&&s.breakpointsBase?"container":s.breakpointsBase,l=["window","container"].includes(s.breakpointsBase)||!s.breakpointsBase?e.el:a.querySelector(s.breakpointsBase),d=e.getBreakpoint(n,o,l);if(!d||e.currentBreakpoint===d)return;const p=(d in n?n[d]:void 0)||e.originalParams,c=Ee(e,s),u=Ee(e,p),h=e.params.grabCursor,m=p.grabCursor,A=s.enabled;c&&!u?(r.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!c&&u&&(r.classList.add(`${s.containerModifierClass}grid`),(p.grid.fill&&"column"===p.grid.fill||!p.grid.fill&&"column"===s.grid.fill)&&r.classList.add(`${s.containerModifierClass}grid-column`),e.emitContainerClasses()),h&&!m?e.unsetGrabCursor():!h&&m&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===p[t])return;const i=s[t]&&s[t].enabled,r=p[t]&&p[t].enabled;i&&!r&&e[t].disable(),!i&&r&&e[t].enable()}));const f=p.direction&&p.direction!==s.direction,g=s.loop&&(p.slidesPerView!==s.slidesPerView||f),w=s.loop;f&&i&&e.changeDirection(),k(e.params,p);const v=e.params.enabled,b=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),A&&!v?e.disable():!A&&v&&e.enable(),e.currentBreakpoint=d,e.emit("_beforeBreakpoint",p),i&&(g?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!w&&b?(e.loopCreate(t),e.updateSlides()):w&&!b&&e.loopDestroy()),e.emit("breakpoint",p)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let s=!1;const r=y(),n="window"===t?r.innerHeight:i.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:n,value:o}=a[e];"window"===t?r.matchMedia(`(min-width: ${o}px)`).matches&&(s=n):o<=i.clientWidth&&(s=n)}return s||"max"}},ye={addClasses:function(){const e=this,{classNames:t,params:i,rtl:s,el:r,device:n}=e,a=function(e,t){const i=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((s=>{e[s]&&i.push(t+s)})):"string"==typeof e&&i.push(t+e)})),i}(["initialized",i.direction,{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...a),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}},xe={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Se(e,t){return function(i){void 0===i&&(i={});const s=Object.keys(i)[0],r=i[s];"object"==typeof r&&null!==r?(!0===e[s]&&(e[s]={enabled:!0}),"navigation"===s&&e[s]&&e[s].enabled&&!e[s].prevEl&&!e[s].nextEl&&(e[s].auto=!0),["pagination","scrollbar"].indexOf(s)>=0&&e[s]&&e[s].enabled&&!e[s].el&&(e[s].auto=!0),s in e&&"enabled"in r?("object"!=typeof e[s]||"enabled"in e[s]||(e[s].enabled=!0),e[s]||(e[s]={enabled:!1}),k(t,i)):k(t,i)):k(t,i)}}const Be={eventsEmitter:Q,update:se,translate:re,transition:ae,slide:oe,loop:le,grabCursor:de,events:be,breakpoints:Ce,checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:s}=i;if(s){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*s;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:ye},Me={};class Te{constructor(){let e,t;for(var i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t||(t={}),t=k({},t),e&&!t.el&&(t.el=e);const n=E();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((i=>{const s=k({},t,{el:i});e.push(new Te(s))})),e}const a=this;a.__swiper__=!0,a.support=U(),a.device=_({userAgent:t.userAgent}),a.browser=Z(),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],t.modules&&Array.isArray(t.modules)&&a.modules.push(...t.modules);const o={};a.modules.forEach((e=>{e({params:t,swiper:a,extendParams:Se(t,o),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const l=k({},xe,o);return a.params=k({},l,Me,t),a.originalParams=k({},a.params),a.passedParams=k({},t),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:i}=this,s=$(F(t,`.${i.slideClass}, swiper-slide`)[0]);return $(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)))}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=F(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const s=i.minTranslate(),r=(i.maxTranslate()-s)*e+s;i.translateTo(r,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((i=>{const s=e.getSlideClasses(i);t.push({slideEl:i,classNames:s}),e.emit("_slideClass",i,s)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:s,slidesGrid:r,slidesSizesGrid:n,size:a,activeIndex:o}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let e,t=s[o]?Math.ceil(s[o].swiperSlideSize):0;for(let i=o+1;i<s.length;i+=1)s[i]&&!e&&(t+=Math.ceil(s[i].swiperSlideSize),l+=1,t>a&&(e=!0));for(let i=o-1;i>=0;i-=1)s[i]&&!e&&(t+=s[i].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<s.length;e+=1)(t?r[e]+n[e]-r[o]<a:r[e]-r[o]<a)&&(l+=1);else for(let e=o-1;e>=0;e-=1)r[o]-r[e]<a&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(i.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&ee(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)s(),i.autoHeight&&e.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&e.isEnd&&!i.centeredSlides){const t=e.virtual&&i.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||s()}i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.el.classList.remove(`${i.params.containerModifierClass}${s}`),i.el.classList.add(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let i=e||t.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=t,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const s=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=i&&i.shadowRoot&&i.shadowRoot.querySelector?i.shadowRoot.querySelector(s()):F(i,s())[0];return!r&&t.params.createElements&&(r=D("div",t.params.wrapperClass),i.append(r),F(i,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:i,wrapperEl:r,slidesEl:t.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:r,hostEl:t.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===Y(i,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===Y(i,"direction")),wrongRTL:"-webkit-box"===Y(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(void 0,!0),t.attachEvents();const i=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&i.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach((e=>{e.complete?ee(t,e):e.addEventListener("load",(e=>{ee(t,e.target)}))})),ie(t),t.initialized=!0,ie(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:s,el:r,wrapperEl:n,slides:a}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),n&&n.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((e=>{i.off(e)})),!1!==e&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(i)),i.destroyed=!0),null}static extendDefaults(e){k(Me,e)}static get extendedDefaults(){return Me}static get defaults(){return xe}static installModule(e){Te.prototype.__modules__||(Te.prototype.__modules__=[]);const t=Te.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Te.installModule(e))),Te):(Te.installModule(e),Te)}}function ke(e,t,i,s){return e.params.createElements&&Object.keys(s).forEach((r=>{if(!i[r]&&!0===i.auto){let n=F(e.el,`.${s[r]}`)[0];n||(n=D("div",s[r]),n.className=s[r],e.el.append(n)),i[r]=n,t[r]=n}})),i}function Le(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function ze(e){const t=this,{params:i,slidesEl:s}=t;i.loop&&t.loopDestroy();const r=e=>{if("string"==typeof e){const t=document.createElement("div");q(t,e),s.append(t.children[0]),q(t,"")}else s.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&r(e[t]);else r(e);t.recalcSlides(),i.loop&&t.loopCreate(),i.observer&&!t.isElement||t.update()}function Pe(e){const t=this,{params:i,activeIndex:s,slidesEl:r}=t;i.loop&&t.loopDestroy();let n=s+1;const a=e=>{if("string"==typeof e){const t=document.createElement("div");q(t,e),r.prepend(t.children[0]),q(t,"")}else r.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&a(e[t]);n=s+e.length}else a(e);t.recalcSlides(),i.loop&&t.loopCreate(),i.observer&&!t.isElement||t.update(),t.slideTo(n,0,!1)}function Fe(e,t){const i=this,{params:s,activeIndex:r,slidesEl:n}=i;let a=r;s.loop&&(a-=i.loopedSlides,i.loopDestroy(),i.recalcSlides());const o=i.slides.length;if(e<=0)return void i.prependSlide(t);if(e>=o)return void i.appendSlide(t);let l=a>e?a+1:a;const d=[];for(let t=o-1;t>=e;t-=1){const e=i.slides[t];e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&n.append(t[e]);l=a>e?a+t.length:a}else n.append(t);for(let e=0;e<d.length;e+=1)n.append(d[e]);i.recalcSlides(),s.loop&&i.loopCreate(),s.observer&&!i.isElement||i.update(),s.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)}function Ie(e){const t=this,{params:i,activeIndex:s}=t;let r=s;i.loop&&(r-=t.loopedSlides,t.loopDestroy());let n,a=r;if("object"==typeof e&&"length"in e){for(let i=0;i<e.length;i+=1)n=e[i],t.slides[n]&&t.slides[n].remove(),n<a&&(a-=1);a=Math.max(a,0)}else n=e,t.slides[n]&&t.slides[n].remove(),n<a&&(a-=1),a=Math.max(a,0);t.recalcSlides(),i.loop&&t.loopCreate(),i.observer&&!t.isElement||t.update(),i.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)}function De(){const e=this,t=[];for(let i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)}function Oe(e){const{effect:t,swiper:i,on:s,setTranslate:r,setTransition:n,overwriteParams:a,perspective:o,recreateShadows:l,getEffectParams:d}=e;let p;s("beforeInit",(()=>{if(i.params.effect!==t)return;i.classNames.push(`${i.params.containerModifierClass}${t}`),o&&o()&&i.classNames.push(`${i.params.containerModifierClass}3d`);const e=a?a():{};Object.assign(i.params,e),Object.assign(i.originalParams,e)})),s("setTranslate _virtualUpdated",(()=>{i.params.effect===t&&r()})),s("setTransition",((e,s)=>{i.params.effect===t&&n(s)})),s("transitionEnd",(()=>{if(i.params.effect===t&&l){if(!d||!d().slideShadows)return;i.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),l()}})),s("virtualUpdate",(()=>{i.params.effect===t&&(i.slides.length||(p=!0),requestAnimationFrame((()=>{p&&i.slides&&i.slides.length&&(r(),p=!1)})))}))}function Ye(e,t){const i=P(t);return i!==t&&(i.style.backfaceVisibility="hidden",i.style["-webkit-backface-visibility"]="hidden"),i}function $e(e){let{swiper:t,duration:i,transformElements:s,allSlides:r}=e;const{activeIndex:n}=t;if(t.params.virtualTranslate&&0!==i){let e,i=!1;e=r?s:s.filter((e=>{const i=e.classList.contains("swiper-slide-transform")?(e=>e.parentElement?e.parentElement:t.slides.find((t=>t.shadowRoot&&t.shadowRoot===e.parentNode)))(e):e;return t.getSlideIndex(i)===n})),e.forEach((e=>{N(e,(()=>{if(i)return;if(!t||t.destroyed)return;i=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function Ge(e,t,i){const s=`swiper-slide-shadow${i?`-${i}`:""}${e?` swiper-slide-shadow-${e}`:""}`,r=P(t);let n=r.querySelector(`.${s.split(" ").join(".")}`);return n||(n=D("div",s.split(" ")),r.append(n)),n}Object.keys(Be).forEach((e=>{Object.keys(Be[e]).forEach((t=>{Te.prototype[t]=Be[e][t]}))})),Te.use([function(e){let{swiper:t,on:i,emit:s}=e;const r=y();let n=null,a=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(s("beforeResize"),s("resize"))},l=()=>{t&&!t.destroyed&&t.initialized&&s("orientationchange")};i("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{a=r.requestAnimationFrame((()=>{const{width:i,height:s}=t;let r=i,n=s;e.forEach((e=>{let{contentBoxSize:i,contentRect:s,target:a}=e;a&&a!==t.el||(r=s?s.width:(i[0]||i).inlineSize,n=s?s.height:(i[0]||i).blockSize)})),r===i&&n===s||o()}))})),n.observe(t.el)):(r.addEventListener("resize",o),r.addEventListener("orientationchange",l))})),i("destroy",(()=>{a&&r.cancelAnimationFrame(a),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",o),r.removeEventListener("orientationchange",l)}))},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=[],a=y(),o=function(e,i){void 0===i&&(i={});const s=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const i=function(){r("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(i):a.setTimeout(i,0)}));s.observe(e,{attributes:void 0===i.attributes||i.attributes,childList:t.isElement||(void 0===i.childList||i).childList,characterData:void 0===i.characterData||i.characterData}),n.push(s)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=G(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]);const Ne=[function(e){let t,{swiper:i,extendParams:s,on:r,emit:n}=e;s({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const a=E();i.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const o=a.createElement("div");function l(e,t){const s=i.params.virtual;if(s.cache&&i.virtual.cache[t])return i.virtual.cache[t];let r;return s.renderSlide?(r=s.renderSlide.call(i,e,t),"string"==typeof r&&(q(o,r),r=o.children[0])):r=i.isElement?D("swiper-slide"):D("div",i.params.slideClass),r.setAttribute("data-swiper-slide-index",t),s.renderSlide||q(r,e),s.cache&&(i.virtual.cache[t]=r),r}function d(e,t,s){const{slidesPerView:r,slidesPerGroup:a,centeredSlides:o,loop:d,initialSlide:p}=i.params;if(t&&!d&&p>0)return;const{addSlidesBefore:c,addSlidesAfter:u}=i.params.virtual,{from:h,to:m,slides:A,slidesGrid:f,offset:g}=i.virtual;i.params.cssMode||i.updateActiveIndex();const w=void 0===s?i.activeIndex||0:s;let v,b,E;v=i.rtlTranslate?"right":i.isHorizontal()?"left":"top",o?(b=Math.floor(r/2)+a+u,E=Math.floor(r/2)+a+c):(b=r+(a-1)+u,E=(d?r:a)+c);let C=w-E,y=w+b;d||(C=Math.max(C,0),y=Math.min(y,A.length-1));let x=(i.slidesGrid[C]||0)-(i.slidesGrid[0]||0);function S(){i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),n("virtualUpdate")}if(d&&w>=E?(C-=E,o||(x+=i.slidesGrid[0])):d&&w<E&&(C=-E,o&&(x+=i.slidesGrid[0])),Object.assign(i.virtual,{from:C,to:y,offset:x,slidesGrid:i.slidesGrid,slidesBefore:E,slidesAfter:b}),h===C&&m===y&&!e)return i.slidesGrid!==f&&x!==g&&i.slides.forEach((e=>{e.style[v]=x-Math.abs(i.cssOverflowAdjustment())+"px"})),i.updateProgress(),void n("virtualUpdate");if(i.params.virtual.renderExternal)return i.params.virtual.renderExternal.call(i,{offset:x,from:C,to:y,slides:function(){const e=[];for(let t=C;t<=y;t+=1)e.push(A[t]);return e}()}),void(i.params.virtual.renderExternalUpdate?S():n("virtualUpdate"));const B=[],M=[],T=e=>{let t=e;return e<0?t=A.length+e:t>=A.length&&(t-=A.length),t};if(e)i.slides.filter((e=>e.matches(`.${i.params.slideClass}, swiper-slide`))).forEach((e=>{e.remove()}));else for(let e=h;e<=m;e+=1)if(e<C||e>y){const t=T(e);i.slides.filter((e=>e.matches(`.${i.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e=>{e.remove()}))}const k=d?-A.length:0,L=d?2*A.length:A.length;for(let t=k;t<L;t+=1)if(t>=C&&t<=y){const i=T(t);void 0===m||e?M.push(i):(t>m&&M.push(i),t<h&&B.push(i))}if(M.forEach((e=>{i.slidesEl.append(l(A[e],e))})),d)for(let e=B.length-1;e>=0;e-=1){const t=B[e];i.slidesEl.prepend(l(A[t],t))}else B.sort(((e,t)=>t-e)),B.forEach((e=>{i.slidesEl.prepend(l(A[e],e))}));F(i.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[v]=x-Math.abs(i.cssOverflowAdjustment())+"px"})),S()}r("beforeInit",(()=>{if(!i.params.virtual.enabled)return;let e;if(void 0===i.passedParams.virtual.slides){const t=[...i.slidesEl.children].filter((e=>e.matches(`.${i.params.slideClass}, swiper-slide`)));t&&t.length&&(i.virtual.slides=[...t],e=!0,t.forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t),i.virtual.cache[t]=e,e.remove()})))}e||(i.virtual.slides=i.params.virtual.slides),i.classNames.push(`${i.params.containerModifierClass}virtual`),i.params.watchSlidesProgress=!0,i.originalParams.watchSlidesProgress=!0,d(!1,!0)})),r("setTranslate",(()=>{i.params.virtual.enabled&&(i.params.cssMode&&!i._immediateVirtual?(clearTimeout(t),t=setTimeout((()=>{d()}),100)):d())})),r("init update resize",(()=>{i.params.virtual.enabled&&i.params.cssMode&&L(i.wrapperEl,"--swiper-virtual-size",`${i.virtualSize}px`)})),Object.assign(i.virtual,{appendSlide:function(e){if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i.virtual.slides.push(e[t]);else i.virtual.slides.push(e);d(!0)},prependSlide:function(e){const t=i.activeIndex;let s=t+1,r=1;if(Array.isArray(e)){for(let t=0;t<e.length;t+=1)e[t]&&i.virtual.slides.unshift(e[t]);s=t+e.length,r=e.length}else i.virtual.slides.unshift(e);if(i.params.virtual.cache){const e=i.virtual.cache,t={};Object.keys(e).forEach((i=>{const s=e[i],n=s.getAttribute("data-swiper-slide-index");n&&s.setAttribute("data-swiper-slide-index",parseInt(n,10)+r),t[parseInt(i,10)+r]=s})),i.virtual.cache=t}d(!0),i.slideTo(s,0)},removeSlide:function(e){if(null==e)return;let t=i.activeIndex;if(Array.isArray(e))for(let s=e.length-1;s>=0;s-=1)i.params.virtual.cache&&(delete i.virtual.cache[e[s]],Object.keys(i.virtual.cache).forEach((t=>{t>e&&(i.virtual.cache[t-1]=i.virtual.cache[t],i.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete i.virtual.cache[t])}))),i.virtual.slides.splice(e[s],1),e[s]<t&&(t-=1),t=Math.max(t,0);else i.params.virtual.cache&&(delete i.virtual.cache[e],Object.keys(i.virtual.cache).forEach((t=>{t>e&&(i.virtual.cache[t-1]=i.virtual.cache[t],i.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete i.virtual.cache[t])}))),i.virtual.slides.splice(e,1),e<t&&(t-=1),t=Math.max(t,0);d(!0),i.slideTo(t,0)},removeAllSlides:function(){i.virtual.slides=[],i.params.virtual.cache&&(i.virtual.cache={}),d(!0),i.slideTo(0,0)},update:d})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=E(),a=y();function o(e){if(!t.enabled)return;const{rtlTranslate:i}=t;let s=e;s.originalEvent&&(s=s.originalEvent);const o=s.keyCode||s.charCode,l=t.params.keyboard.pageUpDown,d=l&&33===o,p=l&&34===o,c=37===o,u=39===o,h=38===o,m=40===o;if(!t.allowSlideNext&&(t.isHorizontal()&&u||t.isVertical()&&m||p))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&c||t.isVertical()&&h||d))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(d||p||c||u||h||m)){let e=!1;if(G(t.el,`.${t.params.slideClass}, swiper-slide`).length>0&&0===G(t.el,`.${t.params.slideActiveClass}`).length)return;const s=t.el,r=s.clientWidth,n=s.clientHeight,o=a.innerWidth,l=a.innerHeight,d=O(s);i&&(d.left-=s.scrollLeft);const p=[[d.left,d.top],[d.left+r,d.top],[d.left,d.top+n],[d.left+r,d.top+n]];for(let t=0;t<p.length;t+=1){const i=p[t];if(i[0]>=0&&i[0]<=o&&i[1]>=0&&i[1]<=l){if(0===i[0]&&0===i[1])continue;e=!0}}if(!e)return}t.isHorizontal()?((d||p||c||u)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),((p||u)&&!i||(d||c)&&i)&&t.slideNext(),((d||c)&&!i||(p||u)&&i)&&t.slidePrev()):((d||p||h||m)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),(p||m)&&t.slideNext(),(d||h)&&t.slidePrev()),r("keyPress",o)}}function l(){t.keyboard.enabled||(n.addEventListener("keydown",o),t.keyboard.enabled=!0)}function d(){t.keyboard.enabled&&(n.removeEventListener("keydown",o),t.keyboard.enabled=!1)}t.keyboard={enabled:!1},i({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),s("init",(()=>{t.params.keyboard.enabled&&l()})),s("destroy",(()=>{t.keyboard.enabled&&d()})),Object.assign(t.keyboard,{enable:l,disable:d})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=y();let a;i({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),t.mousewheel={enabled:!1};let o,l=B();const d=[];function p(){t.enabled&&(t.mouseEntered=!0)}function c(){t.enabled&&(t.mouseEntered=!1)}function u(e){return!(t.params.mousewheel.thresholdDelta&&e.delta<t.params.mousewheel.thresholdDelta||t.params.mousewheel.thresholdTime&&B()-l<t.params.mousewheel.thresholdTime||!(e.delta>=6&&B()-l<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),r("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),r("scroll",e.raw)),l=(new n.Date).getTime(),1))}function h(e){let i=e,s=!0;if(!t.enabled)return;if(e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`))return;const n=t.params.mousewheel;t.params.cssMode&&i.preventDefault();let l=t.el;"container"!==t.params.mousewheel.eventsTarget&&(l=document.querySelector(t.params.mousewheel.eventsTarget));const p=l&&l.contains(i.target);if(!t.mouseEntered&&!p&&!n.releaseOnEdges)return!0;i.originalEvent&&(i=i.originalEvent);let c=0;const h=t.rtlTranslate?-1:1,m=function(e){let t=0,i=0,s=0,r=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,r=10*i,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=r,r=0),(s||r)&&e.deltaMode&&(1===e.deltaMode?(s*=40,r*=40):(s*=800,r*=800)),s&&!t&&(t=s<1?-1:1),r&&!i&&(i=r<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:r}}(i);if(n.forceToAxis)if(t.isHorizontal()){if(!(Math.abs(m.pixelX)>Math.abs(m.pixelY)))return!0;c=-m.pixelX*h}else{if(!(Math.abs(m.pixelY)>Math.abs(m.pixelX)))return!0;c=-m.pixelY}else c=Math.abs(m.pixelX)>Math.abs(m.pixelY)?-m.pixelX*h:-m.pixelY;if(0===c)return!0;n.invert&&(c=-c);let A=t.getTranslate()+c*n.sensitivity;if(A>=t.minTranslate()&&(A=t.minTranslate()),A<=t.maxTranslate()&&(A=t.maxTranslate()),s=!!t.params.loop||!(A===t.minTranslate()||A===t.maxTranslate()),s&&t.params.nested&&i.stopPropagation(),t.params.freeMode&&t.params.freeMode.enabled){const e={time:B(),delta:Math.abs(c),direction:Math.sign(c)},s=o&&e.time<o.time+500&&e.delta<=o.delta&&e.direction===o.direction;if(!s){o=void 0;let l=t.getTranslate()+c*n.sensitivity;const p=t.isBeginning,u=t.isEnd;if(l>=t.minTranslate()&&(l=t.minTranslate()),l<=t.maxTranslate()&&(l=t.maxTranslate()),t.setTransition(0),t.setTranslate(l),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses(),(!p&&t.isBeginning||!u&&t.isEnd)&&t.updateSlidesClasses(),t.params.loop&&t.loopFix({direction:e.direction<0?"next":"prev",byMousewheel:!0}),t.params.freeMode.sticky){clearTimeout(a),a=void 0,d.length>=15&&d.shift();const i=d.length?d[d.length-1]:void 0,s=d[0];if(d.push(e),i&&(e.delta>i.delta||e.direction!==i.direction))d.splice(0);else if(d.length>=15&&e.time-s.time<500&&s.delta-e.delta>=1&&e.delta<=6){const i=c>0?.8:.2;o=e,d.splice(0),a=S((()=>{!t.destroyed&&t.params&&t.slideToClosest(t.params.speed,!0,void 0,i)}),0)}a||(a=S((()=>{!t.destroyed&&t.params&&(o=e,d.splice(0),t.slideToClosest(t.params.speed,!0,void 0,.5))}),500))}if(s||r("scroll",i),t.params.autoplay&&t.params.autoplay.disableOnInteraction&&t.autoplay.stop(),n.releaseOnEdges&&(l===t.minTranslate()||l===t.maxTranslate()))return!0}}else{const i={time:B(),delta:Math.abs(c),direction:Math.sign(c),raw:e};d.length>=2&&d.shift();const s=d.length?d[d.length-1]:void 0;if(d.push(i),s?(i.direction!==s.direction||i.delta>s.delta||i.time>s.time+150)&&u(i):u(i),function(e){const i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1}(i))return!0}return i.preventDefault?i.preventDefault():i.returnValue=!1,!1}function m(e){let i=t.el;"container"!==t.params.mousewheel.eventsTarget&&(i=document.querySelector(t.params.mousewheel.eventsTarget)),i[e]("mouseenter",p),i[e]("mouseleave",c),i[e]("wheel",h)}function A(){return t.params.cssMode?(t.wrapperEl.removeEventListener("wheel",h),!0):!t.mousewheel.enabled&&(m("addEventListener"),t.mousewheel.enabled=!0,!0)}function f(){return t.params.cssMode?(t.wrapperEl.addEventListener(event,h),!0):!!t.mousewheel.enabled&&(m("removeEventListener"),t.mousewheel.enabled=!1,!0)}s("init",(()=>{!t.params.mousewheel.enabled&&t.params.cssMode&&f(),t.params.mousewheel.enabled&&A()})),s("destroy",(()=>{t.params.cssMode&&A(),t.mousewheel.enabled&&f()})),Object.assign(t.mousewheel,{enable:A,disable:f})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;function n(e){let i;return e&&"string"==typeof e&&t.isElement&&(i=t.el.querySelector(e)||t.hostEl.querySelector(e),i)?i:(e&&("string"==typeof e&&(i=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&i&&i.length>1&&1===t.el.querySelectorAll(e).length?i=t.el.querySelector(e):i&&1===i.length&&(i=i[0])),e&&!i?e:i)}function a(e,i){const s=t.params.navigation;(e=j(e)).forEach((e=>{e&&(e.classList[i?"add":"remove"](...s.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=i),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass))}))}function o(){const{nextEl:e,prevEl:i}=t.navigation;if(t.params.loop)return a(i,!1),void a(e,!1);a(i,t.isBeginning&&!t.params.rewind),a(e,t.isEnd&&!t.params.rewind)}function l(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function p(){const e=t.params.navigation;if(t.params.navigation=ke(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let i=n(e.nextEl),s=n(e.prevEl);Object.assign(t.navigation,{nextEl:i,prevEl:s}),i=j(i),s=j(s);const r=(i,s)=>{i&&i.addEventListener("click","next"===s?d:l),!t.enabled&&i&&i.classList.add(...e.lockClass.split(" "))};i.forEach((e=>r(e,"next"))),s.forEach((e=>r(e,"prev")))}function c(){let{nextEl:e,prevEl:i}=t.navigation;e=j(e),i=j(i);const s=(e,i)=>{e.removeEventListener("click","next"===i?d:l),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>s(e,"next"))),i.forEach((e=>s(e,"prev")))}i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},s("init",(()=>{!1===t.params.navigation.enabled?u():(p(),o())})),s("toEdge fromEdge lock unlock",(()=>{o()})),s("destroy",(()=>{c()})),s("enable disable",(()=>{let{nextEl:e,prevEl:i}=t.navigation;e=j(e),i=j(i),t.enabled?o():[...e,...i].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),s("click",((e,i)=>{let{nextEl:s,prevEl:n}=t.navigation;s=j(s),n=j(n);const a=i.target;let o=n.includes(a)||s.includes(a);if(t.isElement&&!o){const e=i.path||i.composedPath&&i.composedPath();e&&(o=e.find((e=>s.includes(e)||n.includes(e))))}if(t.params.navigation.hideOnClick&&!o){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===a||t.pagination.el.contains(a)))return;let e;s.length?e=s[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...s,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const u=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),c()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),p(),o()},disable:u,update:o,init:p,destroy:c})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n="swiper-pagination";let a;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let o=0;function l(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,i){const{bulletActiveClass:s}=t.params.pagination;e&&(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${s}-${i}`),(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&e.classList.add(`${s}-${i}-${i}`))}function p(e){const i=e.target.closest(Le(t.params.pagination.bulletClass));if(!i)return;e.preventDefault();const s=$(i)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===s)return;const e=(r=t.realIndex,n=s,(n%=a=t.slides.length)===1+(r%=a)?"next":n===r-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(s)}else t.slideTo(s);var r,n,a}function c(){const e=t.rtl,i=t.params.pagination;if(l())return;let s,n,p=t.pagination.el;p=j(p);const c=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,u=t.params.loop?Math.ceil(c/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,s=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(s=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,s=t.activeIndex||0),"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let l,c,u;if(i.dynamicBullets&&(a=V(r[0],t.isHorizontal()?"width":"height",!0),p.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(i.dynamicMainBullets+4)+"px"})),i.dynamicMainBullets>1&&void 0!==n&&(o+=s-(n||0),o>i.dynamicMainBullets-1?o=i.dynamicMainBullets-1:o<0&&(o=0)),l=Math.max(s-o,0),c=l+(Math.min(r.length,i.dynamicMainBullets)-1),u=(c+l)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${i.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),p.length>1)r.forEach((e=>{const r=$(e);r===s?e.classList.add(...i.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),i.dynamicBullets&&(r>=l&&r<=c&&e.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),r===l&&d(e,"prev"),r===c&&d(e,"next"))}));else{const e=r[s];if(e&&e.classList.add(...i.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===s?"bullet-active":"bullet")})),i.dynamicBullets){const e=r[l],t=r[c];for(let e=l;e<=c;e+=1)r[e]&&r[e].classList.add(...`${i.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(i.dynamicBullets){const s=Math.min(r.length,i.dynamicMainBullets+4),n=(a*s-a)/2-u*a,o=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?o:"top"]=`${n}px`}))}}p.forEach(((e,n)=>{if("fraction"===i.type&&(e.querySelectorAll(Le(i.currentClass)).forEach((e=>{e.textContent=i.formatFractionCurrent(s+1)})),e.querySelectorAll(Le(i.totalClass)).forEach((e=>{e.textContent=i.formatFractionTotal(u)}))),"progressbar"===i.type){let r;r=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(s+1)/u;let a=1,o=1;"horizontal"===r?a=n:o=n,e.querySelectorAll(Le(i.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===i.type&&i.renderCustom?(q(e,i.renderCustom(t,s+1,u)),0===n&&r("paginationRender",e)):(0===n&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass)}))}function u(){const e=t.params.pagination;if(l())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let s=t.pagination.el;s=j(s);let n="";if("bullets"===e.type){let s=t.params.loop?Math.ceil(i/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&s>i&&(s=i);for(let i=0;i<s;i+=1)e.renderBullet?n+=e.renderBullet.call(t,i,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],s.forEach((i=>{"custom"!==e.type&&q(i,n||""),"bullets"===e.type&&t.pagination.bullets.push(...i.querySelectorAll(Le(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",s[0])}function h(){t.params.pagination=ke(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i;"string"==typeof e.el&&t.isElement&&(i=t.el.querySelector(e.el)),i||"string"!=typeof e.el||(i=[...document.querySelectorAll(e.el)]),i||(i=e.el),i&&0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(i)&&i.length>1&&(i=[...t.el.querySelectorAll(e.el)],i.length>1&&(i=i.find((e=>G(e,".swiper")[0]===t.el)))),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(t.pagination,{el:i}),i=j(i),i.forEach((i=>{"bullets"===e.type&&e.clickable&&i.classList.add(...(e.clickableClass||"").split(" ")),i.classList.add(e.modifierClass+e.type),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.classList.add(e.progressbarOppositeClass),e.clickable&&i.addEventListener("click",p),t.enabled||i.classList.add(e.lockClass)})))}function m(){const e=t.params.pagination;if(l())return;let i=t.pagination.el;i&&(i=j(i),i.forEach((i=>{i.classList.remove(e.hiddenClass),i.classList.remove(e.modifierClass+e.type),i.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(i.classList.remove(...(e.clickableClass||"").split(" ")),i.removeEventListener("click",p))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}s("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:i}=t.pagination;i=j(i),i.forEach((i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),s("init",(()=>{!1===t.params.pagination.enabled?A():(h(),u(),c())})),s("activeIndexChange",(()=>{void 0===t.snapIndex&&c()})),s("snapIndexChange",(()=>{c()})),s("snapGridLengthChange",(()=>{u(),c()})),s("destroy",(()=>{m()})),s("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=j(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),s("lock unlock",(()=>{c()})),s("click",((e,i)=>{const s=i.target,n=j(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!s.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&s===t.navigation.nextEl||t.navigation.prevEl&&s===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const A=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=j(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),m()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=j(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),h(),u(),c()},disable:A,render:u,update:c,init:h,destroy:m})},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=E();let a,o,l,d,p=!1,c=null,u=null;function h(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e,rtlTranslate:i}=t,{dragEl:s,el:r}=e,n=t.params.scrollbar,a=t.params.loop?t.progressLoop:t.progress;let d=o,p=(l-o)*a;i?(p=-p,p>0?(d=o-p,p=0):-p+o>l&&(d=l+p)):p<0?(d=o+p,p=0):p+o>l&&(d=l-p),t.isHorizontal()?(s.style.transform=`translate3d(${p}px, 0, 0)`,s.style.width=`${d}px`):(s.style.transform=`translate3d(0px, ${p}px, 0)`,s.style.height=`${d}px`),n.hide&&(clearTimeout(c),r.style.opacity=1,c=setTimeout((()=>{r.style.opacity=0,r.style.transitionDuration="400ms"}),1e3))}function m(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e}=t,{dragEl:i,el:s}=e;i.style.width="",i.style.height="",l=t.isHorizontal()?s.offsetWidth:s.offsetHeight,d=t.size/(t.virtualSize+t.params.slidesOffsetBefore-(t.params.centeredSlides?t.snapGrid[0]:0)),o="auto"===t.params.scrollbar.dragSize?l*d:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?i.style.width=`${o}px`:i.style.height=`${o}px`,s.style.display=d>=1?"none":"",t.params.scrollbar.hide&&(s.style.opacity=0),t.params.watchOverflow&&t.enabled&&e.el.classList[t.isLocked?"add":"remove"](t.params.scrollbar.lockClass)}function A(e){return t.isHorizontal()?e.clientX:e.clientY}function f(e){const{scrollbar:i,rtlTranslate:s}=t,{el:r}=i;let n;n=(A(e)-O(r)[t.isHorizontal()?"left":"top"]-(null!==a?a:o/2))/(l-o),n=Math.max(Math.min(n,1),0),s&&(n=1-n);const d=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*n;t.updateProgress(d),t.setTranslate(d),t.updateActiveIndex(),t.updateSlidesClasses()}function g(e){const i=t.params.scrollbar,{scrollbar:s,wrapperEl:n}=t,{el:o,dragEl:l}=s;p=!0,a=e.target===l?A(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),n.style.transitionDuration="100ms",l.style.transitionDuration="100ms",f(e),clearTimeout(u),o.style.transitionDuration="0ms",i.hide&&(o.style.opacity=1),t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="none"),r("scrollbarDragStart",e)}function w(e){const{scrollbar:i,wrapperEl:s}=t,{el:n,dragEl:a}=i;p&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,f(e),s.style.transitionDuration="0ms",n.style.transitionDuration="0ms",a.style.transitionDuration="0ms",r("scrollbarDragMove",e))}function v(e){const i=t.params.scrollbar,{scrollbar:s,wrapperEl:n}=t,{el:a}=s;p&&(p=!1,t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="",n.style.transitionDuration=""),i.hide&&(clearTimeout(u),u=S((()=>{a.style.opacity=0,a.style.transitionDuration="400ms"}),1e3)),r("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())}function b(e){const{scrollbar:i,params:s}=t,r=i.el;if(!r)return;const a=r,o=!!s.passiveListeners&&{passive:!1,capture:!1},l=!!s.passiveListeners&&{passive:!0,capture:!1};if(!a)return;const d="on"===e?"addEventListener":"removeEventListener";a[d]("pointerdown",g,o),n[d]("pointermove",w,o),n[d]("pointerup",v,l)}function C(){const{scrollbar:e,el:i}=t;t.params.scrollbar=ke(t,t.originalParams.scrollbar,t.params.scrollbar,{el:"swiper-scrollbar"});const s=t.params.scrollbar;if(!s.el)return;let r,a;if("string"==typeof s.el&&t.isElement&&(r=t.el.querySelector(s.el)),r||"string"!=typeof s.el)r||(r=s.el);else if(r=n.querySelectorAll(s.el),!r.length)return;t.params.uniqueNavElements&&"string"==typeof s.el&&r.length>1&&1===i.querySelectorAll(s.el).length&&(r=i.querySelector(s.el)),r.length>0&&(r=r[0]),r.classList.add(t.isHorizontal()?s.horizontalClass:s.verticalClass),r&&(a=r.querySelector(Le(t.params.scrollbar.dragClass)),a||(a=D("div",t.params.scrollbar.dragClass),r.append(a))),Object.assign(e,{el:r,dragEl:a}),s.draggable&&t.params.scrollbar.el&&t.scrollbar.el&&b("on"),r&&r.classList[t.enabled?"remove":"add"](...x(t.params.scrollbar.lockClass))}function y(){const e=t.params.scrollbar,i=t.scrollbar.el;i&&i.classList.remove(...x(t.isHorizontal()?e.horizontalClass:e.verticalClass)),t.params.scrollbar.el&&t.scrollbar.el&&b("off")}i({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),t.scrollbar={el:null,dragEl:null},s("changeDirection",(()=>{if(!t.scrollbar||!t.scrollbar.el)return;const e=t.params.scrollbar;let{el:i}=t.scrollbar;i=j(i),i.forEach((i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),s("init",(()=>{!1===t.params.scrollbar.enabled?B():(C(),m(),h())})),s("update resize observerUpdate lock unlock changeDirection",(()=>{m()})),s("setTranslate",(()=>{h()})),s("setTransition",((e,i)=>{!function(e){t.params.scrollbar.el&&t.scrollbar.el&&(t.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(i)})),s("enable disable",(()=>{const{el:e}=t.scrollbar;e&&e.classList[t.enabled?"remove":"add"](...x(t.params.scrollbar.lockClass))})),s("destroy",(()=>{y()}));const B=()=>{t.el.classList.add(...x(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.add(...x(t.params.scrollbar.scrollbarDisabledClass)),y()};Object.assign(t.scrollbar,{enable:()=>{t.el.classList.remove(...x(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.remove(...x(t.params.scrollbar.scrollbarDisabledClass)),C(),m(),h()},disable:B,updateSize:m,setTranslate:h,init:C,destroy:y})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({parallax:{enabled:!1}});const r="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",n=(e,i)=>{const{rtl:s}=t,r=s?-1:1,n=e.getAttribute("data-swiper-parallax")||"0";let a=e.getAttribute("data-swiper-parallax-x"),o=e.getAttribute("data-swiper-parallax-y");const l=e.getAttribute("data-swiper-parallax-scale"),d=e.getAttribute("data-swiper-parallax-opacity"),p=e.getAttribute("data-swiper-parallax-rotate");if(a||o?(a=a||"0",o=o||"0"):t.isHorizontal()?(a=n,o="0"):(o=n,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*i*r+"%":a*i*r+"px",o=o.indexOf("%")>=0?parseInt(o,10)*i+"%":o*i+"px",null!=d){const t=d-(d-1)*(1-Math.abs(i));e.style.opacity=t}let c=`translate3d(${a}, ${o}, 0px)`;null!=l&&(c+=` scale(${l-(l-1)*(1-Math.abs(i))})`),p&&null!=p&&(c+=` rotate(${p*i*-1}deg)`),e.style.transform=c},a=()=>{const{el:e,slides:i,progress:s,snapGrid:a,isElement:o}=t,l=F(e,r);t.isElement&&l.push(...F(t.hostEl,r)),l.forEach((e=>{n(e,s)})),i.forEach(((e,i)=>{let o=e.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(o+=Math.ceil(i/2)-s*(a.length-1)),o=Math.min(Math.max(o,-1),1),e.querySelectorAll(`${r}, [data-swiper-parallax-rotate]`).forEach((e=>{n(e,o)}))}))};s("beforeInit",(()=>{t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)})),s("init",(()=>{t.params.parallax.enabled&&a()})),s("setTranslate",(()=>{t.params.parallax.enabled&&a()})),s("setTransition",((e,i)=>{t.params.parallax.enabled&&function(e){void 0===e&&(e=t.params.speed);const{el:i,hostEl:s}=t,n=[...i.querySelectorAll(r)];t.isElement&&n.push(...s.querySelectorAll(r)),n.forEach((t=>{let i=parseInt(t.getAttribute("data-swiper-parallax-duration"),10)||e;0===e&&(i=0),t.style.transitionDuration=`${i}ms`}))}(i)}))},function(e){let{swiper:t,extendParams:i,on:s,emit:r}=e;const n=y();i({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,panOnMouseMove:!1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),t.zoom={enabled:!1};let a,o,l=1,d=!1,p=!1,c={x:0,y:0};const u=[],h={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},m={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},A={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let f,g=1;function w(){if(u.length<2)return 1;const e=u[0].pageX,t=u[0].pageY,i=u[1].pageX,s=u[1].pageY;return Math.sqrt((i-e)**2+(s-t)**2)}function v(){const e=t.params.zoom,i=h.imageWrapEl.getAttribute("data-swiper-zoom")||e.maxRatio;if(e.limitToOriginalSize&&h.imageEl&&h.imageEl.naturalWidth){const e=h.imageEl.naturalWidth/h.imageEl.offsetWidth;return Math.min(e,i)}return i}function b(e){const i=t.isElement?"swiper-slide":`.${t.params.slideClass}`;return!!e.target.matches(i)||t.slides.filter((t=>t.contains(e.target))).length>0}function E(e){const i=`.${t.params.zoom.containerClass}`;return!!e.target.matches(i)||[...t.hostEl.querySelectorAll(i)].filter((t=>t.contains(e.target))).length>0}function C(e){if("mouse"===e.pointerType&&u.splice(0,u.length),!b(e))return;const i=t.params.zoom;if(a=!1,o=!1,u.push(e),!(u.length<2)){if(a=!0,h.scaleStart=w(),!h.slideEl){h.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`),h.slideEl||(h.slideEl=t.slides[t.activeIndex]);let s=h.slideEl.querySelector(`.${i.containerClass}`);if(s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),h.imageEl=s,h.imageWrapEl=s?G(h.imageEl,`.${i.containerClass}`)[0]:void 0,!h.imageWrapEl)return void(h.imageEl=void 0);h.maxRatio=v()}if(h.imageEl){const[e,t]=function(){if(u.length<2)return{x:null,y:null};const e=h.imageEl.getBoundingClientRect();return[(u[0].pageX+(u[1].pageX-u[0].pageX)/2-e.x-n.scrollX)/l,(u[0].pageY+(u[1].pageY-u[0].pageY)/2-e.y-n.scrollY)/l]}();h.originX=e,h.originY=t,h.imageEl.style.transitionDuration="0ms"}d=!0}}function x(e){if(!b(e))return;const i=t.params.zoom,s=t.zoom,r=u.findIndex((t=>t.pointerId===e.pointerId));r>=0&&(u[r]=e),u.length<2||(o=!0,h.scaleMove=w(),h.imageEl&&(s.scale=h.scaleMove/h.scaleStart*l,s.scale>h.maxRatio&&(s.scale=h.maxRatio-1+(s.scale-h.maxRatio+1)**.5),s.scale<i.minRatio&&(s.scale=i.minRatio+1-(i.minRatio-s.scale+1)**.5),h.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`))}function S(e){if(!b(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const i=t.params.zoom,s=t.zoom,r=u.findIndex((t=>t.pointerId===e.pointerId));r>=0&&u.splice(r,1),a&&o&&(a=!1,o=!1,h.imageEl&&(s.scale=Math.max(Math.min(s.scale,h.maxRatio),i.minRatio),h.imageEl.style.transitionDuration=`${t.params.speed}ms`,h.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`,l=s.scale,d=!1,s.scale>1&&h.slideEl?h.slideEl.classList.add(`${i.zoomedSlideClass}`):s.scale<=1&&h.slideEl&&h.slideEl.classList.remove(`${i.zoomedSlideClass}`),1===s.scale&&(h.originX=0,h.originY=0,h.slideEl=void 0)))}function B(){t.touchEventsData.preventTouchMoveFromPointerMove=!1}function T(e){const i="mouse"===e.pointerType&&t.params.zoom.panOnMouseMove;if(!b(e)||!E(e))return;const s=t.zoom;if(!h.imageEl)return;if(!m.isTouched||!h.slideEl)return void(i&&L(e));if(i)return void L(e);m.isMoved||(m.width=h.imageEl.offsetWidth||h.imageEl.clientWidth,m.height=h.imageEl.offsetHeight||h.imageEl.clientHeight,m.startX=M(h.imageWrapEl,"x")||0,m.startY=M(h.imageWrapEl,"y")||0,h.slideWidth=h.slideEl.offsetWidth,h.slideHeight=h.slideEl.offsetHeight,h.imageWrapEl.style.transitionDuration="0ms");const r=m.width*s.scale,n=m.height*s.scale;if(m.minX=Math.min(h.slideWidth/2-r/2,0),m.maxX=-m.minX,m.minY=Math.min(h.slideHeight/2-n/2,0),m.maxY=-m.minY,m.touchesCurrent.x=u.length>0?u[0].pageX:e.pageX,m.touchesCurrent.y=u.length>0?u[0].pageY:e.pageY,Math.max(Math.abs(m.touchesCurrent.x-m.touchesStart.x),Math.abs(m.touchesCurrent.y-m.touchesStart.y))>5&&(t.allowClick=!1),!m.isMoved&&!d){if(t.isHorizontal()&&(Math.floor(m.minX)===Math.floor(m.startX)&&m.touchesCurrent.x<m.touchesStart.x||Math.floor(m.maxX)===Math.floor(m.startX)&&m.touchesCurrent.x>m.touchesStart.x))return m.isTouched=!1,void B();if(!t.isHorizontal()&&(Math.floor(m.minY)===Math.floor(m.startY)&&m.touchesCurrent.y<m.touchesStart.y||Math.floor(m.maxY)===Math.floor(m.startY)&&m.touchesCurrent.y>m.touchesStart.y))return m.isTouched=!1,void B()}e.cancelable&&e.preventDefault(),e.stopPropagation(),clearTimeout(f),t.touchEventsData.preventTouchMoveFromPointerMove=!0,f=setTimeout((()=>{t.destroyed||B()})),m.isMoved=!0;const a=(s.scale-l)/(h.maxRatio-t.params.zoom.minRatio),{originX:o,originY:p}=h;m.currentX=m.touchesCurrent.x-m.touchesStart.x+m.startX+a*(m.width-2*o),m.currentY=m.touchesCurrent.y-m.touchesStart.y+m.startY+a*(m.height-2*p),m.currentX<m.minX&&(m.currentX=m.minX+1-(m.minX-m.currentX+1)**.8),m.currentX>m.maxX&&(m.currentX=m.maxX-1+(m.currentX-m.maxX+1)**.8),m.currentY<m.minY&&(m.currentY=m.minY+1-(m.minY-m.currentY+1)**.8),m.currentY>m.maxY&&(m.currentY=m.maxY-1+(m.currentY-m.maxY+1)**.8),A.prevPositionX||(A.prevPositionX=m.touchesCurrent.x),A.prevPositionY||(A.prevPositionY=m.touchesCurrent.y),A.prevTime||(A.prevTime=Date.now()),A.x=(m.touchesCurrent.x-A.prevPositionX)/(Date.now()-A.prevTime)/2,A.y=(m.touchesCurrent.y-A.prevPositionY)/(Date.now()-A.prevTime)/2,Math.abs(m.touchesCurrent.x-A.prevPositionX)<2&&(A.x=0),Math.abs(m.touchesCurrent.y-A.prevPositionY)<2&&(A.y=0),A.prevPositionX=m.touchesCurrent.x,A.prevPositionY=m.touchesCurrent.y,A.prevTime=Date.now(),h.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}function k(){const e=t.zoom;h.slideEl&&t.activeIndex!==t.slides.indexOf(h.slideEl)&&(h.imageEl&&(h.imageEl.style.transform="translate3d(0,0,0) scale(1)"),h.imageWrapEl&&(h.imageWrapEl.style.transform="translate3d(0,0,0)"),h.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`),e.scale=1,l=1,h.slideEl=void 0,h.imageEl=void 0,h.imageWrapEl=void 0,h.originX=0,h.originY=0)}function L(e){if(l<=1||!h.imageWrapEl)return;if(!b(e)||!E(e))return;const t=n.getComputedStyle(h.imageWrapEl).transform,i=new n.DOMMatrix(t);if(!p)return p=!0,c.x=e.clientX,c.y=e.clientY,m.startX=i.e,m.startY=i.f,m.width=h.imageEl.offsetWidth||h.imageEl.clientWidth,m.height=h.imageEl.offsetHeight||h.imageEl.clientHeight,h.slideWidth=h.slideEl.offsetWidth,void(h.slideHeight=h.slideEl.offsetHeight);const s=-3*(e.clientX-c.x),r=-3*(e.clientY-c.y),a=m.width*l,o=m.height*l,d=h.slideWidth,u=h.slideHeight,A=Math.min(d/2-a/2,0),f=-A,g=Math.min(u/2-o/2,0),w=-g,v=Math.max(Math.min(m.startX+s,f),A),C=Math.max(Math.min(m.startY+r,w),g);h.imageWrapEl.style.transitionDuration="0ms",h.imageWrapEl.style.transform=`translate3d(${v}px, ${C}px, 0)`,c.x=e.clientX,c.y=e.clientY,m.startX=v,m.startY=C,m.currentX=v,m.currentY=C}function z(e){const i=t.zoom,s=t.params.zoom;if(!h.slideEl){e&&e.target&&(h.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`)),h.slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?h.slideEl=F(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:h.slideEl=t.slides[t.activeIndex]);let i=h.slideEl.querySelector(`.${s.containerClass}`);i&&(i=i.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),h.imageEl=i,h.imageWrapEl=i?G(h.imageEl,`.${s.containerClass}`)[0]:void 0}if(!h.imageEl||!h.imageWrapEl)return;let r,a,o,d,p,c,u,A,f,g,w,b,E,C,y,x,S,B;t.params.cssMode&&(t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.touchAction="none"),h.slideEl.classList.add(`${s.zoomedSlideClass}`),void 0===m.touchesStart.x&&e?(r=e.pageX,a=e.pageY):(r=m.touchesStart.x,a=m.touchesStart.y);const M=l,T="number"==typeof e?e:null;1===l&&T&&(r=void 0,a=void 0,m.touchesStart.x=void 0,m.touchesStart.y=void 0);const k=v();i.scale=T||k,l=T||k,!e||1===l&&T?(u=0,A=0):(S=h.slideEl.offsetWidth,B=h.slideEl.offsetHeight,o=O(h.slideEl).left+n.scrollX,d=O(h.slideEl).top+n.scrollY,p=o+S/2-r,c=d+B/2-a,f=h.imageEl.offsetWidth||h.imageEl.clientWidth,g=h.imageEl.offsetHeight||h.imageEl.clientHeight,w=f*i.scale,b=g*i.scale,E=Math.min(S/2-w/2,0),C=Math.min(B/2-b/2,0),y=-E,x=-C,M>0&&T&&"number"==typeof m.currentX&&"number"==typeof m.currentY?(u=m.currentX*i.scale/M,A=m.currentY*i.scale/M):(u=p*i.scale,A=c*i.scale),u<E&&(u=E),u>y&&(u=y),A<C&&(A=C),A>x&&(A=x)),T&&1===i.scale&&(h.originX=0,h.originY=0),m.currentX=u,m.currentY=A,h.imageWrapEl.style.transitionDuration="300ms",h.imageWrapEl.style.transform=`translate3d(${u}px, ${A}px,0)`,h.imageEl.style.transitionDuration="300ms",h.imageEl.style.transform=`translate3d(0,0,0) scale(${i.scale})`}function P(){const e=t.zoom,i=t.params.zoom;if(!h.slideEl){t.params.virtual&&t.params.virtual.enabled&&t.virtual?h.slideEl=F(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:h.slideEl=t.slides[t.activeIndex];let e=h.slideEl.querySelector(`.${i.containerClass}`);e&&(e=e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),h.imageEl=e,h.imageWrapEl=e?G(h.imageEl,`.${i.containerClass}`)[0]:void 0}h.imageEl&&h.imageWrapEl&&(t.params.cssMode&&(t.wrapperEl.style.overflow="",t.wrapperEl.style.touchAction=""),e.scale=1,l=1,m.currentX=void 0,m.currentY=void 0,m.touchesStart.x=void 0,m.touchesStart.y=void 0,h.imageWrapEl.style.transitionDuration="300ms",h.imageWrapEl.style.transform="translate3d(0,0,0)",h.imageEl.style.transitionDuration="300ms",h.imageEl.style.transform="translate3d(0,0,0) scale(1)",h.slideEl.classList.remove(`${i.zoomedSlideClass}`),h.slideEl=void 0,h.originX=0,h.originY=0,t.params.zoom.panOnMouseMove&&(c={x:0,y:0},p&&(p=!1,m.startX=0,m.startY=0)))}function I(e){const i=t.zoom;i.scale&&1!==i.scale?P():z(e)}function D(){return{passiveListener:!!t.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!t.params.passiveListeners||{passive:!1,capture:!0}}}function Y(){const e=t.zoom;if(e.enabled)return;e.enabled=!0;const{passiveListener:i,activeListenerWithCapture:s}=D();t.wrapperEl.addEventListener("pointerdown",C,i),t.wrapperEl.addEventListener("pointermove",x,s),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.addEventListener(e,S,i)})),t.wrapperEl.addEventListener("pointermove",T,s)}function $(){const e=t.zoom;if(!e.enabled)return;e.enabled=!1;const{passiveListener:i,activeListenerWithCapture:s}=D();t.wrapperEl.removeEventListener("pointerdown",C,i),t.wrapperEl.removeEventListener("pointermove",x,s),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.removeEventListener(e,S,i)})),t.wrapperEl.removeEventListener("pointermove",T,s)}Object.defineProperty(t.zoom,"scale",{get:()=>g,set(e){if(g!==e){const t=h.imageEl,i=h.slideEl;r("zoomChange",e,t,i)}g=e}}),s("init",(()=>{t.params.zoom.enabled&&Y()})),s("destroy",(()=>{$()})),s("touchStart",((e,i)=>{t.zoom.enabled&&function(e){const i=t.device;if(!h.imageEl)return;if(m.isTouched)return;i.android&&e.cancelable&&e.preventDefault(),m.isTouched=!0;const s=u.length>0?u[0]:e;m.touchesStart.x=s.pageX,m.touchesStart.y=s.pageY}(i)})),s("touchEnd",((e,i)=>{t.zoom.enabled&&function(){const e=t.zoom;if(u.length=0,!h.imageEl)return;if(!m.isTouched||!m.isMoved)return m.isTouched=!1,void(m.isMoved=!1);m.isTouched=!1,m.isMoved=!1;let i=300,s=300;const r=A.x*i,n=m.currentX+r,a=A.y*s,o=m.currentY+a;0!==A.x&&(i=Math.abs((n-m.currentX)/A.x)),0!==A.y&&(s=Math.abs((o-m.currentY)/A.y));const l=Math.max(i,s);m.currentX=n,m.currentY=o;const d=m.width*e.scale,p=m.height*e.scale;m.minX=Math.min(h.slideWidth/2-d/2,0),m.maxX=-m.minX,m.minY=Math.min(h.slideHeight/2-p/2,0),m.maxY=-m.minY,m.currentX=Math.max(Math.min(m.currentX,m.maxX),m.minX),m.currentY=Math.max(Math.min(m.currentY,m.maxY),m.minY),h.imageWrapEl.style.transitionDuration=`${l}ms`,h.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}()})),s("doubleTap",((e,i)=>{!t.animating&&t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&I(i)})),s("transitionEnd",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&k()})),s("slideChange",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&k()})),Object.assign(t.zoom,{enable:Y,disable:$,in:z,out:P,toggle:I})},function(e){let{swiper:t,extendParams:i,on:s}=e;function r(e,t){const i=function(){let e,t,i;return(s,r)=>{for(t=-1,e=s.length;e-t>1;)i=e+t>>1,s[i]<=r?t=i:e=i;return e}}();let s,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=i(this.x,e),s=r-1,(e-this.x[s])*(this.y[r]-this.y[s])/(this.x[r]-this.x[s])+this.y[s]):0},this}function n(){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)}i({controller:{control:void 0,inverse:!1,by:"slide"}}),t.controller={control:void 0},s("beforeInit",(()=>{"undefined"!=typeof window&&("string"==typeof t.params.controller.control||t.params.controller.control instanceof HTMLElement)?("string"==typeof t.params.controller.control?[...document.querySelectorAll(t.params.controller.control)]:[t.params.controller.control]).forEach((e=>{if(t.controller.control||(t.controller.control=[]),e&&e.swiper)t.controller.control.push(e.swiper);else if(e){const i=`${t.params.eventsPrefix}init`,s=r=>{t.controller.control.push(r.detail[0]),t.update(),e.removeEventListener(i,s)};e.addEventListener(i,s)}})):t.controller.control=t.params.controller.control})),s("update",(()=>{n()})),s("resize",(()=>{n()})),s("observerUpdate",(()=>{n()})),s("setTranslate",((e,i,s)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTranslate(i,s)})),s("setTransition",((e,i,s)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTransition(i,s)})),Object.assign(t.controller,{setTranslate:function(e,i){const s=t.controller.control;let n,a;const o=t.constructor;function l(e){if(e.destroyed)return;const i=t.rtlTranslate?-t.translate:t.translate;"slide"===t.params.controller.by&&(function(e){t.controller.spline=t.params.loop?new r(t.slidesGrid,e.slidesGrid):new r(t.snapGrid,e.snapGrid)}(e),a=-t.controller.spline.interpolate(-i)),a&&"container"!==t.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(t.maxTranslate()-t.minTranslate()),!Number.isNaN(n)&&Number.isFinite(n)||(n=1),a=(i-t.minTranslate())*n+e.minTranslate()),t.params.controller.inverse&&(a=e.maxTranslate()-a),e.updateProgress(a),e.setTranslate(a,t),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(s))for(let e=0;e<s.length;e+=1)s[e]!==i&&s[e]instanceof o&&l(s[e]);else s instanceof o&&i!==s&&l(s)},setTransition:function(e,i){const s=t.constructor,r=t.controller.control;let n;function a(i){i.destroyed||(i.setTransition(e,t),0!==e&&(i.transitionStart(),i.params.autoHeight&&S((()=>{i.updateAutoHeight()})),N(i.wrapperEl,(()=>{r&&i.transitionEnd()}))))}if(Array.isArray(r))for(n=0;n<r.length;n+=1)r[n]!==i&&r[n]instanceof s&&a(r[n]);else r instanceof s&&i!==r&&a(r)}})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,containerRole:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null,scrollOnFocus:!0}}),t.a11y={clicked:!1};let r,n,a=null,o=(new Date).getTime();function l(e){const t=a;0!==t.length&&q(t,e)}function d(e){(e=j(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function p(e){(e=j(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function c(e,t){(e=j(e)).forEach((e=>{e.setAttribute("role",t)}))}function u(e,t){(e=j(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function h(e,t){(e=j(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function m(e){(e=j(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function A(e){(e=j(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function f(e){if(13!==e.keyCode&&32!==e.keyCode)return;const i=t.params.a11y,s=e.target;if(!t.pagination||!t.pagination.el||s!==t.pagination.el&&!t.pagination.el.contains(e.target)||e.target.matches(Le(t.params.pagination.bulletClass))){if(t.navigation&&t.navigation.prevEl&&t.navigation.nextEl){const e=j(t.navigation.prevEl);j(t.navigation.nextEl).includes(s)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?l(i.lastSlideMessage):l(i.nextSlideMessage)),e.includes(s)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?l(i.firstSlideMessage):l(i.prevSlideMessage))}t.pagination&&s.matches(Le(t.params.pagination.bulletClass))&&s.click()}}function g(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function w(){return g()&&t.params.pagination.clickable}const v=(e,t,i)=>{d(e),"BUTTON"!==e.tagName&&(c(e,"button"),e.addEventListener("keydown",f)),h(e,i),function(e,t){(e=j(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},b=e=>{n&&n!==e.target&&!n.contains(e.target)&&(r=!0),t.a11y.clicked=!0},C=()=>{r=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{t.destroyed||(t.a11y.clicked=!1)}))}))},y=e=>{o=(new Date).getTime()},x=e=>{if(t.a11y.clicked||!t.params.a11y.scrollOnFocus)return;if((new Date).getTime()-o<100)return;const i=e.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!i||!t.slides.includes(i))return;n=i;const s=t.slides.indexOf(i)===t.activeIndex,a=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(i);s||a||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,requestAnimationFrame((()=>{r||(t.params.loop?t.slideToLoop(parseInt(i.getAttribute("data-swiper-slide-index")),0):t.slideTo(t.slides.indexOf(i),0),r=!1)})))},S=()=>{const e=t.params.a11y;e.itemRoleDescriptionMessage&&u(t.slides,e.itemRoleDescriptionMessage),e.slideRole&&c(t.slides,e.slideRole);const i=t.slides.length;e.slideLabelMessage&&t.slides.forEach(((s,r)=>{const n=t.params.loop?parseInt(s.getAttribute("data-swiper-slide-index"),10):r;h(s,e.slideLabelMessage.replace(/\{\{index\}\}/,n+1).replace(/\{\{slidesLength\}\}/,i))}))};s("beforeInit",(()=>{a=D("span",t.params.a11y.notificationClass),a.setAttribute("aria-live","assertive"),a.setAttribute("aria-atomic","true")})),s("afterInit",(()=>{t.params.a11y.enabled&&(()=>{const e=t.params.a11y;t.el.append(a);const i=t.el;e.containerRoleDescriptionMessage&&u(i,e.containerRoleDescriptionMessage),e.containerMessage&&h(i,e.containerMessage),e.containerRole&&c(i,e.containerRole);const s=t.wrapperEl,r=e.id||s.getAttribute("id")||`swiper-wrapper-${n=16,void 0===n&&(n=16),"x".repeat(n).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var n;const o=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";var l;l=r,j(s).forEach((e=>{e.setAttribute("id",l)})),function(e,t){(e=j(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(s,o),S();let{nextEl:d,prevEl:p}=t.navigation?t.navigation:{};d=j(d),p=j(p),d&&d.forEach((t=>v(t,r,e.nextSlideMessage))),p&&p.forEach((t=>v(t,r,e.prevSlideMessage))),w()&&j(t.pagination.el).forEach((e=>{e.addEventListener("keydown",f)})),E().addEventListener("visibilitychange",y),t.el.addEventListener("focus",x,!0),t.el.addEventListener("focus",x,!0),t.el.addEventListener("pointerdown",b,!0),t.el.addEventListener("pointerup",C,!0)})()})),s("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{t.params.a11y.enabled&&S()})),s("fromEdge toEdge afterInit lock unlock",(()=>{t.params.a11y.enabled&&function(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:e,prevEl:i}=t.navigation;i&&(t.isBeginning?(m(i),p(i)):(A(i),d(i))),e&&(t.isEnd?(m(e),p(e)):(A(e),d(e)))}()})),s("paginationUpdate",(()=>{t.params.a11y.enabled&&function(){const e=t.params.a11y;g()&&t.pagination.bullets.forEach((i=>{t.params.pagination.clickable&&(d(i),t.params.pagination.renderBullet||(c(i,"button"),h(i,e.paginationBulletMessage.replace(/\{\{index\}\}/,$(i)+1)))),i.matches(Le(t.params.pagination.bulletActiveClass))?i.setAttribute("aria-current","true"):i.removeAttribute("aria-current")}))}()})),s("destroy",(()=>{t.params.a11y.enabled&&function(){a&&a.remove();let{nextEl:e,prevEl:i}=t.navigation?t.navigation:{};e=j(e),i=j(i),e&&e.forEach((e=>e.removeEventListener("keydown",f))),i&&i.forEach((e=>e.removeEventListener("keydown",f))),w()&&j(t.pagination.el).forEach((e=>{e.removeEventListener("keydown",f)})),E().removeEventListener("visibilitychange",y),t.el&&"string"!=typeof t.el&&(t.el.removeEventListener("focus",x,!0),t.el.removeEventListener("pointerdown",b,!0),t.el.removeEventListener("pointerup",C,!0))}()}))},function(e){let{swiper:t,extendParams:i,on:s}=e;i({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let r=!1,n={};const a=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),o=e=>{const t=y();let i;i=e?new URL(e):t.location;const s=i.pathname.slice(1).split("/").filter((e=>""!==e)),r=s.length;return{key:s[r-2],value:s[r-1]}},l=(e,i)=>{const s=y();if(!r||!t.params.history.enabled)return;let n;n=t.params.url?new URL(t.params.url):s.location;const o=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${i}"]`):t.slides[i];let l=a(o.getAttribute("data-history"));if(t.params.history.root.length>0){let i=t.params.history.root;"/"===i[i.length-1]&&(i=i.slice(0,i.length-1)),l=`${i}/${e?`${e}/`:""}${l}`}else n.pathname.includes(e)||(l=`${e?`${e}/`:""}${l}`);t.params.history.keepQuery&&(l+=n.search);const d=s.history.state;d&&d.value===l||(t.params.history.replaceState?s.history.replaceState({value:l},null,l):s.history.pushState({value:l},null,l))},d=(e,i,s)=>{if(i)for(let r=0,n=t.slides.length;r<n;r+=1){const n=t.slides[r];if(a(n.getAttribute("data-history"))===i){const i=t.getSlideIndex(n);t.slideTo(i,e,s)}}else t.slideTo(0,e,s)},p=()=>{n=o(t.params.url),d(t.params.speed,n.value,!1)};s("init",(()=>{t.params.history.enabled&&(()=>{const e=y();if(t.params.history){if(!e.history||!e.history.pushState)return t.params.history.enabled=!1,void(t.params.hashNavigation.enabled=!0);r=!0,n=o(t.params.url),n.key||n.value?(d(0,n.value,t.params.runCallbacksOnInit),t.params.history.replaceState||e.addEventListener("popstate",p)):t.params.history.replaceState||e.addEventListener("popstate",p)}})()})),s("destroy",(()=>{t.params.history.enabled&&(()=>{const e=y();t.params.history.replaceState||e.removeEventListener("popstate",p)})()})),s("transitionEnd _freeModeNoMomentumRelease",(()=>{r&&l(t.params.history.key,t.activeIndex)})),s("slideChange",(()=>{r&&t.params.cssMode&&l(t.params.history.key,t.activeIndex)}))},function(e){let{swiper:t,extendParams:i,emit:s,on:r}=e,n=!1;const a=E(),o=y();i({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(e,i){if(t.virtual&&t.params.virtual.enabled){const e=t.slides.find((e=>e.getAttribute("data-hash")===i));return e?parseInt(e.getAttribute("data-swiper-slide-index"),10):0}return t.getSlideIndex(F(t.slidesEl,`.${t.params.slideClass}[data-hash="${i}"], swiper-slide[data-hash="${i}"]`)[0])}}});const l=()=>{s("hashChange");const e=a.location.hash.replace("#",""),i=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex];if(e!==(i?i.getAttribute("data-hash"):"")){const i=t.params.hashNavigation.getSlideIndex(t,e);if(void 0===i||Number.isNaN(i))return;t.slideTo(i)}},d=()=>{if(!n||!t.params.hashNavigation.enabled)return;const e=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex],i=e?e.getAttribute("data-hash")||e.getAttribute("data-history"):"";t.params.hashNavigation.replaceState&&o.history&&o.history.replaceState?(o.history.replaceState(null,null,`#${i}`||""),s("hashSet")):(a.location.hash=i||"",s("hashSet"))};r("init",(()=>{t.params.hashNavigation.enabled&&(()=>{if(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)return;n=!0;const e=a.location.hash.replace("#","");if(e){const i=0,s=t.params.hashNavigation.getSlideIndex(t,e);t.slideTo(s||0,i,t.params.runCallbacksOnInit,!0)}t.params.hashNavigation.watchState&&o.addEventListener("hashchange",l)})()})),r("destroy",(()=>{t.params.hashNavigation.enabled&&t.params.hashNavigation.watchState&&o.removeEventListener("hashchange",l)})),r("transitionEnd _freeModeNoMomentumRelease",(()=>{n&&d()})),r("slideChange",(()=>{n&&t.params.cssMode&&d()}))},function(e){let t,i,{swiper:s,extendParams:r,on:n,emit:a,params:o}=e;s.autoplay={running:!1,paused:!1,timeLeft:0},r({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let l,d,p,c,u,h,m,A,f=o&&o.autoplay?o.autoplay.delay:3e3,g=o&&o.autoplay?o.autoplay.delay:3e3,w=(new Date).getTime();function v(e){s&&!s.destroyed&&s.wrapperEl&&e.target===s.wrapperEl&&(s.wrapperEl.removeEventListener("transitionend",v),A||e.detail&&e.detail.bySwiperTouchMove||B())}const b=()=>{if(s.destroyed||!s.autoplay.running)return;s.autoplay.paused?d=!0:d&&(g=l,d=!1);const e=s.autoplay.paused?l:w+g-(new Date).getTime();s.autoplay.timeLeft=e,a("autoplayTimeLeft",e,e/f),i=requestAnimationFrame((()=>{b()}))},C=e=>{if(s.destroyed||!s.autoplay.running)return;cancelAnimationFrame(i),b();let r=void 0===e?s.params.autoplay.delay:e;f=s.params.autoplay.delay,g=s.params.autoplay.delay;const n=(()=>{let e;if(e=s.virtual&&s.params.virtual.enabled?s.slides.find((e=>e.classList.contains("swiper-slide-active"))):s.slides[s.activeIndex],e)return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(n)&&n>0&&void 0===e&&(r=n,f=n,g=n),l=r;const o=s.params.speed,d=()=>{s&&!s.destroyed&&(s.params.autoplay.reverseDirection?!s.isBeginning||s.params.loop||s.params.rewind?(s.slidePrev(o,!0,!0),a("autoplay")):s.params.autoplay.stopOnLastSlide||(s.slideTo(s.slides.length-1,o,!0,!0),a("autoplay")):!s.isEnd||s.params.loop||s.params.rewind?(s.slideNext(o,!0,!0),a("autoplay")):s.params.autoplay.stopOnLastSlide||(s.slideTo(0,o,!0,!0),a("autoplay")),s.params.cssMode&&(w=(new Date).getTime(),requestAnimationFrame((()=>{C()}))))};return r>0?(clearTimeout(t),t=setTimeout((()=>{d()}),r)):requestAnimationFrame((()=>{d()})),r},y=()=>{w=(new Date).getTime(),s.autoplay.running=!0,C(),a("autoplayStart")},x=()=>{s.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(i),a("autoplayStop")},S=(e,i)=>{if(s.destroyed||!s.autoplay.running)return;clearTimeout(t),e||(m=!0);const r=()=>{a("autoplayPause"),s.params.autoplay.waitForTransition?s.wrapperEl.addEventListener("transitionend",v):B()};if(s.autoplay.paused=!0,i)return h&&(l=s.params.autoplay.delay),h=!1,void r();const n=l||s.params.autoplay.delay;l=n-((new Date).getTime()-w),s.isEnd&&l<0&&!s.params.loop||(l<0&&(l=0),r())},B=()=>{s.isEnd&&l<0&&!s.params.loop||s.destroyed||!s.autoplay.running||(w=(new Date).getTime(),m?(m=!1,C(l)):C(),s.autoplay.paused=!1,a("autoplayResume"))},M=()=>{if(s.destroyed||!s.autoplay.running)return;const e=E();"hidden"===e.visibilityState&&(m=!0,S(!0)),"visible"===e.visibilityState&&B()},T=e=>{"mouse"===e.pointerType&&(m=!0,A=!0,s.animating||s.autoplay.paused||S(!0))},k=e=>{"mouse"===e.pointerType&&(A=!1,s.autoplay.paused&&B())};n("init",(()=>{s.params.autoplay.enabled&&(s.params.autoplay.pauseOnMouseEnter&&(s.el.addEventListener("pointerenter",T),s.el.addEventListener("pointerleave",k)),E().addEventListener("visibilitychange",M),y())})),n("destroy",(()=>{s.el&&"string"!=typeof s.el&&(s.el.removeEventListener("pointerenter",T),s.el.removeEventListener("pointerleave",k)),E().removeEventListener("visibilitychange",M),s.autoplay.running&&x()})),n("_freeModeStaticRelease",(()=>{(c||m)&&B()})),n("_freeModeNoMomentumRelease",(()=>{s.params.autoplay.disableOnInteraction?x():S(!0,!0)})),n("beforeTransitionStart",((e,t,i)=>{!s.destroyed&&s.autoplay.running&&(i||!s.params.autoplay.disableOnInteraction?S(!0,!0):x())})),n("sliderFirstMove",(()=>{!s.destroyed&&s.autoplay.running&&(s.params.autoplay.disableOnInteraction?x():(p=!0,c=!1,m=!1,u=setTimeout((()=>{m=!0,c=!0,S(!0)}),200)))})),n("touchEnd",(()=>{if(!s.destroyed&&s.autoplay.running&&p){if(clearTimeout(u),clearTimeout(t),s.params.autoplay.disableOnInteraction)return c=!1,void(p=!1);c&&s.params.cssMode&&B(),c=!1,p=!1}})),n("slideChange",(()=>{!s.destroyed&&s.autoplay.running&&(h=!0)})),Object.assign(s.autoplay,{start:y,stop:x,pause:S,resume:B})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let r=!1,n=!1;function a(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const i=e.clickedIndex,s=e.clickedSlide;if(s&&s.classList.contains(t.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let r;r=e.params.loop?parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10):i,t.params.loop?t.slideToLoop(r):t.slideTo(r)}function o(){const{thumbs:e}=t.params;if(r)return!1;r=!0;const i=t.constructor;if(e.swiper instanceof i){if(e.swiper.destroyed)return r=!1,!1;t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper.update()}else if(T(e.swiper)){const s=Object.assign({},e.swiper);Object.assign(s,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new i(s),n=!0}return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",a),!0}function l(e){const i=t.thumbs.swiper;if(!i||i.destroyed)return;const s="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView;let r=1;const n=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),i.slides.forEach((e=>e.classList.remove(n))),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<r;e+=1)F(i.slidesEl,`[data-swiper-slide-index="${t.realIndex+e}"]`).forEach((e=>{e.classList.add(n)}));else for(let e=0;e<r;e+=1)i.slides[t.realIndex+e]&&i.slides[t.realIndex+e].classList.add(n);const a=t.params.thumbs.autoScrollOffset,o=a&&!i.params.loop;if(t.realIndex!==i.realIndex||o){const r=i.activeIndex;let n,l;if(i.params.loop){const e=i.slides.find((e=>e.getAttribute("data-swiper-slide-index")===`${t.realIndex}`));n=i.slides.indexOf(e),l=t.activeIndex>t.previousIndex?"next":"prev"}else n=t.realIndex,l=n>t.previousIndex?"next":"prev";o&&(n+="next"===l?a:-1*a),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(n)<0&&(i.params.centeredSlides?n=n>r?n-Math.floor(s/2)+1:n+Math.floor(s/2)-1:n>r&&i.params.slidesPerGroup,i.slideTo(n,e?0:void 0))}}t.thumbs={swiper:null},s("beforeInit",(()=>{const{thumbs:e}=t.params;if(e&&e.swiper)if("string"==typeof e.swiper||e.swiper instanceof HTMLElement){const i=E(),s=()=>{const s="string"==typeof e.swiper?i.querySelector(e.swiper):e.swiper;if(s&&s.swiper)e.swiper=s.swiper,o(),l(!0);else if(s){const i=`${t.params.eventsPrefix}init`,r=n=>{e.swiper=n.detail[0],s.removeEventListener(i,r),o(),l(!0),e.swiper.update(),t.update()};s.addEventListener(i,r)}return s},r=()=>{t.destroyed||s()||requestAnimationFrame(r)};requestAnimationFrame(r)}else o(),l(!0)})),s("slideChange update resize observerUpdate",(()=>{l()})),s("setTransition",((e,i)=>{const s=t.thumbs.swiper;s&&!s.destroyed&&s.setTransition(i)})),s("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&n&&e.destroy()})),Object.assign(t.thumbs,{init:o,update:l})},function(e){let{swiper:t,extendParams:i,emit:s,once:r}=e;i({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:i}=t;0===e.velocities.length&&e.velocities.push({position:i[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:i[t.isHorizontal()?"currentX":"currentY"],time:B()})},onTouchEnd:function(e){let{currentPos:i}=e;if(t.params.cssMode)return;const{params:n,wrapperEl:a,rtlTranslate:o,snapGrid:l,touchEventsData:d}=t,p=B()-d.touchStartTime;if(i<-t.minTranslate())t.slideTo(t.activeIndex);else if(i>-t.maxTranslate())t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1);else{if(n.freeMode.momentum){if(d.velocities.length>1){const e=d.velocities.pop(),i=d.velocities.pop(),s=e.position-i.position,r=e.time-i.time;t.velocity=s/r,t.velocity/=2,Math.abs(t.velocity)<n.freeMode.minimumVelocity&&(t.velocity=0),(r>150||B()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeMode.momentumVelocityRatio,d.velocities.length=0;let e=1e3*n.freeMode.momentumRatio;const i=t.velocity*e;let p=t.translate+i;o&&(p=-p);let c,u=!1;const h=20*Math.abs(t.velocity)*n.freeMode.momentumBounceRatio;let m;if(p<t.maxTranslate())n.freeMode.momentumBounce?(p+t.maxTranslate()<-h&&(p=t.maxTranslate()-h),c=t.maxTranslate(),u=!0,d.allowMomentumBounce=!0):p=t.maxTranslate(),n.loop&&n.centeredSlides&&(m=!0);else if(p>t.minTranslate())n.freeMode.momentumBounce?(p-t.minTranslate()>h&&(p=t.minTranslate()+h),c=t.minTranslate(),u=!0,d.allowMomentumBounce=!0):p=t.minTranslate(),n.loop&&n.centeredSlides&&(m=!0);else if(n.freeMode.sticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-p){e=t;break}p=Math.abs(l[e]-p)<Math.abs(l[e-1]-p)||"next"===t.swipeDirection?l[e]:l[e-1],p=-p}if(m&&r("transitionEnd",(()=>{t.loopFix()})),0!==t.velocity){if(e=o?Math.abs((-p-t.translate)/t.velocity):Math.abs((p-t.translate)/t.velocity),n.freeMode.sticky){const i=Math.abs((o?-p:p)-t.translate),s=t.slidesSizesGrid[t.activeIndex];e=i<s?n.speed:i<2*s?1.5*n.speed:2.5*n.speed}}else if(n.freeMode.sticky)return void t.slideToClosest();n.freeMode.momentumBounce&&u?(t.updateProgress(c),t.setTransition(e),t.setTranslate(p),t.transitionStart(!0,t.swipeDirection),t.animating=!0,N(a,(()=>{t&&!t.destroyed&&d.allowMomentumBounce&&(s("momentumBounce"),t.setTransition(n.speed),setTimeout((()=>{t.setTranslate(c),N(a,(()=>{t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(s("_freeModeNoMomentumRelease"),t.updateProgress(p),t.setTransition(e),t.setTranslate(p),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,N(a,(()=>{t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(p),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(n.freeMode.sticky)return void t.slideToClosest();n.freeMode&&s("_freeModeNoMomentumRelease")}(!n.freeMode.momentum||p>=n.longSwipesMs)&&(s("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})},function(e){let t,i,s,r,{swiper:n,extendParams:a,on:o}=e;a({grid:{rows:1,fill:"column"}});const l=()=>{let e=n.params.spaceBetween;return"string"==typeof e&&e.indexOf("%")>=0?e=parseFloat(e.replace("%",""))/100*n.size:"string"==typeof e&&(e=parseFloat(e)),e};o("init",(()=>{r=n.params.grid&&n.params.grid.rows>1})),o("update",(()=>{const{params:e,el:t}=n,i=e.grid&&e.grid.rows>1;r&&!i?(t.classList.remove(`${e.containerModifierClass}grid`,`${e.containerModifierClass}grid-column`),s=1,n.emitContainerClasses()):!r&&i&&(t.classList.add(`${e.containerModifierClass}grid`),"column"===e.grid.fill&&t.classList.add(`${e.containerModifierClass}grid-column`),n.emitContainerClasses()),r=i})),n.grid={initSlides:e=>{const{slidesPerView:r}=n.params,{rows:a,fill:o}=n.params.grid,l=n.virtual&&n.params.virtual.enabled?n.virtual.slides.length:e.length;s=Math.floor(l/a),t=Math.floor(l/a)===l/a?l:Math.ceil(l/a)*a,"auto"!==r&&"row"===o&&(t=Math.max(t,r*a)),i=t/a},unsetSlides:()=>{n.slides&&n.slides.forEach((e=>{e.swiperSlideGridSet&&(e.style.height="",e.style[n.getDirectionLabel("margin-top")]="")}))},updateSlide:(e,r,a)=>{const{slidesPerGroup:o}=n.params,d=l(),{rows:p,fill:c}=n.params.grid,u=n.virtual&&n.params.virtual.enabled?n.virtual.slides.length:a.length;let h,m,A;if("row"===c&&o>1){const i=Math.floor(e/(o*p)),s=e-p*o*i,n=0===i?o:Math.min(Math.ceil((u-i*p*o)/p),o);A=Math.floor(s/n),m=s-A*n+i*o,h=m+A*t/p,r.style.order=h}else"column"===c?(m=Math.floor(e/p),A=e-m*p,(m>s||m===s&&A===p-1)&&(A+=1,A>=p&&(A=0,m+=1))):(A=Math.floor(e/i),m=e-A*i);r.row=A,r.column=m,r.style.height=`calc((100% - ${(p-1)*d}px) / ${p})`,r.style[n.getDirectionLabel("margin-top")]=0!==A?d&&`${d}px`:"",r.swiperSlideGridSet=!0},updateWrapperSize:(e,i)=>{const{centeredSlides:s,roundLengths:r}=n.params,a=l(),{rows:o}=n.params.grid;if(n.virtualSize=(e+a)*t,n.virtualSize=Math.ceil(n.virtualSize/o)-a,n.params.cssMode||(n.wrapperEl.style[n.getDirectionLabel("width")]=`${n.virtualSize+a}px`),s){const e=[];for(let t=0;t<i.length;t+=1){let s=i[t];r&&(s=Math.floor(s)),i[t]<n.virtualSize+i[0]&&e.push(s)}i.splice(0,i.length),i.push(...e)}}}},function(e){let{swiper:t}=e;Object.assign(t,{appendSlide:ze.bind(t),prependSlide:Pe.bind(t),addSlide:Fe.bind(t),removeSlide:Ie.bind(t),removeAllSlides:De.bind(t)})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({fadeEffect:{crossFade:!1}}),Oe({effect:"fade",swiper:t,on:s,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let i=0;i<e.length;i+=1){const e=t.slides[i];let s=-e.swiperSlideOffset;t.params.virtualTranslate||(s-=t.translate);let r=0;t.isHorizontal()||(r=s,s=0);const n=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),a=Ye(0,e);a.style.opacity=n,a.style.transform=`translate3d(${s}px, ${r}px, 0px)`}},setTransition:e=>{const i=t.slides.map((e=>P(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`})),$e({swiper:t,duration:e,transformElements:i,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const r=(e,t,i)=>{let s=i?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=i?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");s||(s=D("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(i?"left":"top")).split(" ")),e.append(s)),r||(r=D("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(i?"right":"bottom")).split(" ")),e.append(r)),s&&(s.style.opacity=Math.max(-t,0)),r&&(r.style.opacity=Math.max(t,0))};Oe({effect:"cube",swiper:t,on:s,setTranslate:()=>{const{el:e,wrapperEl:i,slides:s,width:n,height:a,rtlTranslate:o,size:l,browser:d}=t,p=R(t),c=t.params.cubeEffect,u=t.isHorizontal(),h=t.virtual&&t.params.virtual.enabled;let m,A=0;c.shadow&&(u?(m=t.wrapperEl.querySelector(".swiper-cube-shadow"),m||(m=D("div","swiper-cube-shadow"),t.wrapperEl.append(m)),m.style.height=`${n}px`):(m=e.querySelector(".swiper-cube-shadow"),m||(m=D("div","swiper-cube-shadow"),e.append(m))));for(let e=0;e<s.length;e+=1){const t=s[e];let i=e;h&&(i=parseInt(t.getAttribute("data-swiper-slide-index"),10));let n=90*i,a=Math.floor(n/360);o&&(n=-n,a=Math.floor(-n/360));const d=Math.max(Math.min(t.progress,1),-1);let m=0,f=0,g=0;i%4==0?(m=4*-a*l,g=0):(i-1)%4==0?(m=0,g=4*-a*l):(i-2)%4==0?(m=l+4*a*l,g=l):(i-3)%4==0&&(m=-l,g=3*l+4*l*a),o&&(m=-m),u||(f=m,m=0);const w=`rotateX(${p(u?0:-n)}deg) rotateY(${p(u?n:0)}deg) translate3d(${m}px, ${f}px, ${g}px)`;d<=1&&d>-1&&(A=90*i+90*d,o&&(A=90*-i-90*d)),t.style.transform=w,c.slideShadows&&r(t,d,u)}if(i.style.transformOrigin=`50% 50% -${l/2}px`,i.style["-webkit-transform-origin"]=`50% 50% -${l/2}px`,c.shadow)if(u)m.style.transform=`translate3d(0px, ${n/2+c.shadowOffset}px, ${-n/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${c.shadowScale})`;else{const e=Math.abs(A)-90*Math.floor(Math.abs(A)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),i=c.shadowScale,s=c.shadowScale/t,r=c.shadowOffset;m.style.transform=`scale3d(${i}, 1, ${s}) translate3d(0px, ${a/2+r}px, ${-a/2/s}px) rotateX(-89.99deg)`}const f=(d.isSafari||d.isWebView)&&d.needPerspectiveFix?-l/2:0;i.style.transform=`translate3d(0px,0,${f}px) rotateX(${p(t.isHorizontal()?0:A)}deg) rotateY(${p(t.isHorizontal()?-A:0)}deg)`,i.style.setProperty("--swiper-cube-translate-z",`${f}px`)},setTransition:e=>{const{el:i,slides:s}=t;if(s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),t.params.cubeEffect.shadow&&!t.isHorizontal()){const t=i.querySelector(".swiper-cube-shadow");t&&(t.style.transitionDuration=`${e}ms`)}},recreateShadows:()=>{const e=t.isHorizontal();t.slides.forEach((t=>{const i=Math.max(Math.min(t.progress,1),-1);r(t,i,e)}))},getEffectParams:()=>t.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({flipEffect:{slideShadows:!0,limitRotation:!0}});const r=(e,i)=>{let s=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");s||(s=Ge("flip",e,t.isHorizontal()?"left":"top")),r||(r=Ge("flip",e,t.isHorizontal()?"right":"bottom")),s&&(s.style.opacity=Math.max(-i,0)),r&&(r.style.opacity=Math.max(i,0))};Oe({effect:"flip",swiper:t,on:s,setTranslate:()=>{const{slides:e,rtlTranslate:i}=t,s=t.params.flipEffect,n=R(t);for(let a=0;a<e.length;a+=1){const o=e[a];let l=o.progress;t.params.flipEffect.limitRotation&&(l=Math.max(Math.min(o.progress,1),-1));const d=o.swiperSlideOffset;let p=-180*l,c=0,u=t.params.cssMode?-d-t.translate:-d,h=0;t.isHorizontal()?i&&(p=-p):(h=u,u=0,c=-p,p=0),o.style.zIndex=-Math.abs(Math.round(l))+e.length,s.slideShadows&&r(o,l);const m=`translate3d(${u}px, ${h}px, 0px) rotateX(${n(c)}deg) rotateY(${n(p)}deg)`;Ye(0,o).style.transform=m}},setTransition:e=>{const i=t.slides.map((e=>P(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),$e({swiper:t,duration:e,transformElements:i})},recreateShadows:()=>{t.params.flipEffect,t.slides.forEach((e=>{let i=e.progress;t.params.flipEffect.limitRotation&&(i=Math.max(Math.min(e.progress,1),-1)),r(e,i)}))},getEffectParams:()=>t.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Oe({effect:"coverflow",swiper:t,on:s,setTranslate:()=>{const{width:e,height:i,slides:s,slidesSizesGrid:r}=t,n=t.params.coverflowEffect,a=t.isHorizontal(),o=t.translate,l=a?e/2-o:i/2-o,d=a?n.rotate:-n.rotate,p=n.depth,c=R(t);for(let e=0,t=s.length;e<t;e+=1){const t=s[e],i=r[e],o=(l-t.swiperSlideOffset-i/2)/i,u="function"==typeof n.modifier?n.modifier(o):o*n.modifier;let h=a?d*u:0,m=a?0:d*u,A=-p*Math.abs(u),f=n.stretch;"string"==typeof f&&-1!==f.indexOf("%")&&(f=parseFloat(n.stretch)/100*i);let g=a?0:f*u,w=a?f*u:0,v=1-(1-n.scale)*Math.abs(u);Math.abs(w)<.001&&(w=0),Math.abs(g)<.001&&(g=0),Math.abs(A)<.001&&(A=0),Math.abs(h)<.001&&(h=0),Math.abs(m)<.001&&(m=0),Math.abs(v)<.001&&(v=0);const b=`translate3d(${w}px,${g}px,${A}px)  rotateX(${c(m)}deg) rotateY(${c(h)}deg) scale(${v})`;if(Ye(0,t).style.transform=b,t.style.zIndex=1-Math.abs(Math.round(u)),n.slideShadows){let e=a?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),i=a?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=Ge("coverflow",t,a?"left":"top")),i||(i=Ge("coverflow",t,a?"right":"bottom")),e&&(e.style.opacity=u>0?u:0),i&&(i.style.opacity=-u>0?-u:0)}}},setTransition:e=>{t.slides.map((e=>P(e))).forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const r=e=>"string"==typeof e?e:`${e}px`;Oe({effect:"creative",swiper:t,on:s,setTranslate:()=>{const{slides:e,wrapperEl:i,slidesSizesGrid:s}=t,n=t.params.creativeEffect,{progressMultiplier:a}=n,o=t.params.centeredSlides,l=R(t);if(o){const e=s[0]/2-t.params.slidesOffsetBefore||0;i.style.transform=`translateX(calc(50% - ${e}px))`}for(let i=0;i<e.length;i+=1){const s=e[i],d=s.progress,p=Math.min(Math.max(s.progress,-n.limitProgress),n.limitProgress);let c=p;o||(c=Math.min(Math.max(s.originalProgress,-n.limitProgress),n.limitProgress));const u=s.swiperSlideOffset,h=[t.params.cssMode?-u-t.translate:-u,0,0],m=[0,0,0];let A=!1;t.isHorizontal()||(h[1]=h[0],h[0]=0);let f={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};p<0?(f=n.next,A=!0):p>0&&(f=n.prev,A=!0),h.forEach(((e,t)=>{h[t]=`calc(${e}px + (${r(f.translate[t])} * ${Math.abs(p*a)}))`})),m.forEach(((e,t)=>{let i=f.rotate[t]*Math.abs(p*a);m[t]=i})),s.style.zIndex=-Math.abs(Math.round(d))+e.length;const g=h.join(", "),w=`rotateX(${l(m[0])}deg) rotateY(${l(m[1])}deg) rotateZ(${l(m[2])}deg)`,v=c<0?`scale(${1+(1-f.scale)*c*a})`:`scale(${1-(1-f.scale)*c*a})`,b=c<0?1+(1-f.opacity)*c*a:1-(1-f.opacity)*c*a,E=`translate3d(${g}) ${w} ${v}`;if(A&&f.shadow||!A){let e=s.querySelector(".swiper-slide-shadow");if(!e&&f.shadow&&(e=Ge("creative",s)),e){const t=n.shadowPerProgress?p*(1/n.limitProgress):p;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const C=Ye(0,s);C.style.transform=E,C.style.opacity=b,f.origin&&(C.style.transformOrigin=f.origin)}},setTransition:e=>{const i=t.slides.map((e=>P(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),$e({swiper:t,duration:e,transformElements:i,allSlides:!0})},perspective:()=>t.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:i,on:s}=e;i({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Oe({effect:"cards",swiper:t,on:s,setTranslate:()=>{const{slides:e,activeIndex:i,rtlTranslate:s}=t,r=t.params.cardsEffect,{startTranslate:n,isTouched:a}=t.touchEventsData,o=s?-t.translate:t.translate;for(let l=0;l<e.length;l+=1){const d=e[l],p=d.progress,c=Math.min(Math.max(p,-4),4);let u=d.swiperSlideOffset;t.params.centeredSlides&&!t.params.cssMode&&(t.wrapperEl.style.transform=`translateX(${t.minTranslate()}px)`),t.params.centeredSlides&&t.params.cssMode&&(u-=e[0].swiperSlideOffset);let h=t.params.cssMode?-u-t.translate:-u,m=0;const A=-100*Math.abs(c);let f=1,g=-r.perSlideRotate*c,w=r.perSlideOffset-.75*Math.abs(c);const v=t.virtual&&t.params.virtual.enabled?t.virtual.from+l:l,b=(v===i||v===i-1)&&c>0&&c<1&&(a||t.params.cssMode)&&o<n,E=(v===i||v===i+1)&&c<0&&c>-1&&(a||t.params.cssMode)&&o>n;if(b||E){const e=(1-Math.abs((Math.abs(c)-.5)/.5))**.5;g+=-28*c*e,f+=-.5*e,w+=96*e,m=-25*e*Math.abs(c)+"%"}if(h=c<0?`calc(${h}px ${s?"-":"+"} (${w*Math.abs(c)}%))`:c>0?`calc(${h}px ${s?"-":"+"} (-${w*Math.abs(c)}%))`:`${h}px`,!t.isHorizontal()){const e=m;m=h,h=e}const C=c<0?""+(1+(1-f)*c):""+(1-(1-f)*c),y=`\n        translate3d(${h}, ${m}, ${A}px)\n        rotateZ(${r.rotate?s?-g:g:0}deg)\n        scale(${C})\n      `;if(r.slideShadows){let e=d.querySelector(".swiper-slide-shadow");e||(e=Ge("cards",d)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(c)-.5)/.5,0),1))}d.style.zIndex=-Math.abs(Math.round(p))+e.length,Ye(0,d).style.transform=y}},setTransition:e=>{const i=t.slides.map((e=>P(e)));i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),$e({swiper:t,duration:e,transformElements:i})},perspective:()=>!0,overwriteParams:()=>({_loopSwapReset:!1,watchSlidesProgress:!0,loopAdditionalSlides:t.params.cardsEffect.rotate?3:2,centeredSlides:!0,virtualTranslate:!t.params.cssMode})})}];Te.use(Ne);var Ve=i(72),je=i.n(Ve),Re=i(825),qe=i.n(Re),Xe=i(659),We=i.n(Xe),He=i(56),Ue=i.n(He),_e=i(540),Ze=i.n(_e),Qe=i(113),Ke=i.n(Qe),Je=i(753),et={};et.styleTagTransform=Ke(),et.setAttributes=Ue(),et.insert=We().bind(null,"head"),et.domAPI=qe(),et.insertStyleElement=Ze(),je()(Je.A,et),Je.A&&Je.A.locals&&Je.A.locals,new class{constructor(e,t,i){r(this,"form",null),r(this,"fields",{}),r(this,"groupFields",{}),r(this,"errors",{}),r(this,"isValid",!1),r(this,"isSubmitted",!1),r(this,"globalConfig",g),r(this,"errorLabels",{}),r(this,"successLabels",{}),r(this,"eventListeners",[]),r(this,"dictLocale",h),r(this,"currentLocale","en"),r(this,"customStyleTags",{}),r(this,"onSuccessCallback"),r(this,"onFailCallback"),r(this,"onValidateCallback"),r(this,"tooltips",[]),r(this,"lastScrollPosition"),r(this,"isScrollTick"),r(this,"fieldIds",new Map),r(this,"getKeyByFieldSelector",(e=>this.fieldIds.get(e))),r(this,"getFieldSelectorByKey",(e=>{for(const[t,i]of this.fieldIds)if(e===i)return t})),r(this,"getCompatibleFields",(()=>{const e={};return Object.keys(this.fields).forEach((t=>{let i=t;const s=this.getFieldSelectorByKey(t);"string"==typeof s&&(i=s),e[i]={...this.fields[t]}})),e})),r(this,"setKeyByFieldSelector",(e=>{if(this.fieldIds.has(e))return this.fieldIds.get(e);const t=String(this.fieldIds.size+1);return this.fieldIds.set(e,t),t})),r(this,"refreshAllTooltips",(()=>{this.tooltips.forEach((e=>{e.refresh()}))})),r(this,"handleDocumentScroll",(()=>{this.lastScrollPosition=window.scrollY,this.isScrollTick||(window.requestAnimationFrame((()=>{this.refreshAllTooltips(),this.isScrollTick=!1})),this.isScrollTick=!0)})),r(this,"formSubmitHandler",(e=>{e.preventDefault(),this.isSubmitted=!0,this.validateHandler(e)})),r(this,"handleFieldChange",(e=>{let t;for(const i in this.fields)if(this.fields[i].elem===e){t=i;break}t&&(this.fields[t].touched=!0,this.validateField(t,!0))})),r(this,"handleGroupChange",(e=>{let t;for(const i in this.groupFields)if(this.groupFields[i].elems.find((t=>t===e))){t=i;break}t&&(this.groupFields[t].touched=!0,this.validateGroup(t,!0))})),r(this,"handlerChange",(e=>{e.target&&(this.handleFieldChange(e.target),this.handleGroupChange(e.target),this.renderErrors())})),this.initialize(e,t,i)}initialize(e,t,i){if(this.form=null,this.errors={},this.isValid=!1,this.isSubmitted=!1,this.globalConfig=g,this.errorLabels={},this.successLabels={},this.eventListeners=[],this.customStyleTags={},this.tooltips=[],this.currentLocale="en","string"==typeof e){const t=document.querySelector(e);if(!t)throw Error(`Form with ${e} selector not found! Please check the form selector`);this.setForm(t)}else{if(!(e instanceof HTMLFormElement))throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");this.setForm(e)}if(this.globalConfig={...g,...t},i&&(this.dictLocale=[...i,...h]),this.isTooltip()){const e=document.createElement("style");e.textContent=".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}",this.customStyleTags[u.Label]=document.head.appendChild(e),this.addListener("scroll",document,this.handleDocumentScroll)}}getLocalisedString(e,t,i){var s;const r=null!=i?i:e;let n=null==(s=this.dictLocale.find((e=>e.key===r)))?void 0:s.dict[this.currentLocale];if(n||i&&(n=i),n&&void 0!==t)switch(e){case p.MaxLength:case p.MinLength:case p.MaxNumber:case p.MinNumber:case p.MinFilesCount:case p.MaxFilesCount:n=n.replace(":value",String(t))}return n||i||"Value is incorrect"}getFieldErrorMessage(e,t){const i="function"==typeof e.errorMessage?e.errorMessage(this.getElemValue(t),this.fields):e.errorMessage;return this.getLocalisedString(e.rule,e.value,i)}getFieldSuccessMessage(e,t){const i="function"==typeof e?e(this.getElemValue(t),this.fields):e;return this.getLocalisedString(void 0,void 0,i)}getGroupErrorMessage(e){return this.getLocalisedString(e.rule,void 0,e.errorMessage)}getGroupSuccessMessage(e){if(e.successMessage)return this.getLocalisedString(void 0,void 0,e.successMessage)}setFieldInvalid(e,t){this.fields[e].isValid=!1,this.fields[e].errorMessage=this.getFieldErrorMessage(t,this.fields[e].elem)}setFieldValid(e,t){this.fields[e].isValid=!0,void 0!==t&&(this.fields[e].successMessage=this.getFieldSuccessMessage(t,this.fields[e].elem))}setGroupInvalid(e,t){this.groupFields[e].isValid=!1,this.groupFields[e].errorMessage=this.getGroupErrorMessage(t)}setGroupValid(e,t){this.groupFields[e].isValid=!0,this.groupFields[e].successMessage=this.getGroupSuccessMessage(t)}getElemValue(e){switch(e.type){case"checkbox":return e.checked;case"file":return e.files;default:return e.value}}validateGroupRule(e,t,i){i.rule===c.Required&&(t.every((e=>!e.checked))?this.setGroupInvalid(e,i):this.setGroupValid(e,i))}validateFieldRule(e,t,i,s=!1){const r=i.value,c=this.getElemValue(t);var u;if(i.plugin)i.plugin(c,this.getCompatibleFields())||this.setFieldInvalid(e,i);else switch(i.rule){case p.Required:(e=>{let t=e;return"string"==typeof e&&(t=e.trim()),!t})(c)&&this.setFieldInvalid(e,i);break;case p.Email:if(d(c))break;u=c,n.test(u)||this.setFieldInvalid(e,i);break;case p.MaxLength:if(void 0===r){console.error(`Value for ${i.rule} rule for [${e}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if("number"!=typeof r){console.error(`Value for ${i.rule} rule for [${e}] should be a number. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if(d(c))break;((e,t)=>e.length>t)(c,r)&&this.setFieldInvalid(e,i);break;case p.MinLength:if(void 0===r){console.error(`Value for ${i.rule} rule for [${e}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if("number"!=typeof r){console.error(`Value for ${i.rule} rule for [${e}] should be a number. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if(d(c))break;((e,t)=>e.length<t)(c,r)&&this.setFieldInvalid(e,i);break;case p.Password:if(d(c))break;(e=>o.test(e))(c)||this.setFieldInvalid(e,i);break;case p.StrongPassword:if(d(c))break;(e=>l.test(e))(c)||this.setFieldInvalid(e,i);break;case p.Number:if(d(c))break;(e=>"string"==typeof e&&!isNaN(+e)&&!isNaN(parseFloat(e)))(c)||this.setFieldInvalid(e,i);break;case p.Integer:if(d(c))break;(e=>a.test(e))(c)||this.setFieldInvalid(e,i);break;case p.MaxNumber:{if(void 0===r){console.error(`Value for ${i.rule} rule for [${e}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if("number"!=typeof r){console.error(`Value for ${i.rule} rule for [${e}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if(d(c))break;const t=+c;(Number.isNaN(t)||((e,t)=>e>t)(t,r))&&this.setFieldInvalid(e,i);break}case p.MinNumber:{if(void 0===r){console.error(`Value for ${i.rule} rule for [${e}] field is not defined. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if("number"!=typeof r){console.error(`Value for ${i.rule} rule for [${e}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if(d(c))break;const t=+c;(Number.isNaN(t)||((e,t)=>e<t)(t,r))&&this.setFieldInvalid(e,i);break}case p.CustomRegexp:{if(void 0===r)return console.error(`Value for ${i.rule} rule for [${e}] field is not defined. This field will be always invalid.`),void this.setFieldInvalid(e,i);let t;try{t=new RegExp(r)}catch(t){console.error(`Value for ${i.rule} rule for [${e}] should be a valid regexp. This field will be always invalid.`),this.setFieldInvalid(e,i);break}const s=String(c);""===s||t.test(s)||this.setFieldInvalid(e,i);break}case p.MinFilesCount:if(void 0===r){console.error(`Value for ${i.rule} rule for [${e}] field is not defined. This field will be always invalid.`),this.setFieldInvalid(e,i);break}if("number"!=typeof r){console.error(`Value for ${i.rule} rule for [${e}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if(Number.isFinite(null==c?void 0:c.length)&&c.length<r){this.setFieldInvalid(e,i);break}break;case p.MaxFilesCount:if(void 0===r){console.error(`Value for ${i.rule} rule for [${e}] field is not defined. This field will be always invalid.`),this.setFieldInvalid(e,i);break}if("number"!=typeof r){console.error(`Value for ${i.rule} rule for [${e}] field should be a number. The field will be always invalid.`),this.setFieldInvalid(e,i);break}if(Number.isFinite(null==c?void 0:c.length)&&c.length>r){this.setFieldInvalid(e,i);break}break;case p.Files:{if(void 0===r)return console.error(`Value for ${i.rule} rule for [${e}] field is not defined. This field will be always invalid.`),void this.setFieldInvalid(e,i);if("object"!=typeof r)return console.error(`Value for ${i.rule} rule for [${e}] field should be an object. This field will be always invalid.`),void this.setFieldInvalid(e,i);const t=r.files;if("object"!=typeof t)return console.error(`Value for ${i.rule} rule for [${e}] field should be an object with files array. This field will be always invalid.`),void this.setFieldInvalid(e,i);const s=(e,t)=>{const i=Number.isFinite(t.minSize)&&e.size<t.minSize,s=Number.isFinite(t.maxSize)&&e.size>t.maxSize,r=Array.isArray(t.names)&&!t.names.includes(e.name),n=Array.isArray(t.extensions)&&!t.extensions.includes(e.name.split(".")[e.name.split(".").length-1]),a=Array.isArray(t.types)&&!t.types.includes(e.type);return i||s||r||n||a};if("object"==typeof c&&null!==c)for(let r=0,n=c.length;r<n;++r){const n=c.item(r);if(!n){this.setFieldInvalid(e,i);break}if(s(n,t)){this.setFieldInvalid(e,i);break}}break}default:{if("function"!=typeof i.validator)return console.error(`Validator for custom rule for [${e}] field should be a function. This field will be always invalid.`),void this.setFieldInvalid(e,i);const t=i.validator(c,this.getCompatibleFields());if("boolean"!=typeof t&&"function"!=typeof t&&console.error(`Validator return value for [${e}] field should be boolean or function. It will be cast to boolean.`),"function"==typeof t){if(!s){this.fields[e].asyncCheckPending=!1;const s=t();return m(s)?s.then((t=>{t||this.setFieldInvalid(e,i)})).catch((()=>{this.setFieldInvalid(e,i)})):(console.error(`Validator function for custom rule for [${e}] field should return a Promise. This field will be always invalid.`),void this.setFieldInvalid(e,i))}this.fields[e].asyncCheckPending=!0}t||this.setFieldInvalid(e,i)}}}isFormValid(){let e=!0;for(let t=0,i=Object.values(this.fields).length;t<i;++t){const i=Object.values(this.fields)[t];if(void 0===i.isValid){e=void 0;break}if(!1===i.isValid){e=!1;break}}for(let t=0,i=Object.values(this.groupFields).length;t<i;++t){const i=Object.values(this.groupFields)[t];if(void 0===i.isValid){e=void 0;break}if(!1===i.isValid){e=!1;break}}return e}validateField(e,t=!1){var i;const s=this.fields[e];s.isValid=!0;const r=[];return[...s.rules].reverse().forEach((i=>{const n=this.validateFieldRule(e,s.elem,i,t);m(n)&&r.push(n)})),s.isValid&&this.setFieldValid(e,null==(i=s.config)?void 0:i.successMessage),Promise.allSettled(r).finally((()=>{var e;t&&(null==(e=this.onValidateCallback)||e.call(this,{isValid:this.isFormValid(),isSubmitted:this.isSubmitted,fields:this.getCompatibleFields(),groups:{...this.groupFields}}))}))}revalidateField(e){if("string"!=typeof e&&!f(e))throw Error("Field selector is not valid. Please specify a string selector or a valid DOM element.");const t=this.getKeyByFieldSelector(e);return t&&this.fields[t]?new Promise((e=>{this.validateField(t,!0).finally((()=>{this.clearFieldStyle(t),this.clearFieldLabel(t),this.renderFieldError(t,!0),e(!!this.fields[t].isValid)}))})):(console.error("Field not found. Check the field selector."),Promise.reject())}revalidateGroup(e){if("string"!=typeof e&&!f(e))throw Error("Group selector is not valid. Please specify a string selector or a valid DOM element.");const t=this.getKeyByFieldSelector(e);return t&&this.groupFields[t]?new Promise((e=>{this.validateGroup(t).finally((()=>{this.clearFieldLabel(t),this.renderGroupError(t,!0),e(!!this.groupFields[t].isValid)}))})):(console.error("Group not found. Check the group selector."),Promise.reject())}validateGroup(e,t=!1){const i=this.groupFields[e],s=[];return[...i.rules].reverse().forEach((t=>{const r=this.validateGroupRule(e,i.elems,t);m(r)&&s.push(r)})),Promise.allSettled(s).finally((()=>{var e;t&&(null==(e=this.onValidateCallback)||e.call(this,{isValid:this.isFormValid(),isSubmitted:this.isSubmitted,fields:this.getCompatibleFields(),groups:{...this.groupFields}}))}))}focusInvalidField(){for(const e in this.fields){const t=this.fields[e];if(!t.isValid){setTimeout((()=>t.elem.focus()),0);break}}}afterSubmitValidation(e=!1){this.renderErrors(e),this.globalConfig.focusInvalidField&&this.focusInvalidField()}validate(e=!1){return new Promise((t=>{const i=[];Object.keys(this.fields).forEach((e=>{const t=this.validateField(e);m(t)&&i.push(t)})),Object.keys(this.groupFields).forEach((e=>{const t=this.validateGroup(e);m(t)&&i.push(t)})),Promise.allSettled(i).then((()=>{var s;this.afterSubmitValidation(e),null==(s=this.onValidateCallback)||s.call(this,{isValid:this.isFormValid(),isSubmitted:this.isSubmitted,fields:this.getCompatibleFields(),groups:{...this.groupFields}}),t(!!i.length)}))}))}revalidate(){return new Promise((e=>{this.validateHandler(void 0,!0).finally((()=>{this.globalConfig.focusInvalidField&&this.focusInvalidField(),e(this.isValid)}))}))}validateHandler(e,t=!1){return this.globalConfig.lockForm&&this.lockForm(),this.validate(t).finally((()=>{var t,i,s;this.globalConfig.lockForm&&this.unlockForm(),this.isValid?(null==(t=this.onSuccessCallback)||t.call(this,e),this.globalConfig.submitFormAutomatically&&(null==(i=null==e?void 0:e.currentTarget)||i.submit())):null==(s=this.onFailCallback)||s.call(this,this.getCompatibleFields(),this.groupFields)}))}setForm(e){this.form=e,this.form.setAttribute("novalidate","novalidate"),this.removeListener("submit",this.form,this.formSubmitHandler),this.addListener("submit",this.form,this.formSubmitHandler)}addListener(e,t,i){t.addEventListener(e,i),this.eventListeners.push({type:e,elem:t,func:i})}removeListener(e,t,i){t.removeEventListener(e,i),this.eventListeners=this.eventListeners.filter((i=>i.type!==e||i.elem!==t))}addField(e,t,i){if("string"!=typeof e&&!f(e))throw Error("Field selector is not valid. Please specify a string selector or a valid DOM element.");let s;if(s="string"==typeof e?this.form.querySelector(e):e,!s)throw Error("Field doesn't exist in the DOM! Please check the field selector.");if(!Array.isArray(t)||!t.length)throw Error("Rules argument should be an array and should contain at least 1 element.");t.forEach((e=>{if(!("rule"in e||"validator"in e||"plugin"in e))throw Error("Rules argument must contain at least one rule or validator property.");if(!(e.validator||e.plugin||e.rule&&Object.values(p).includes(e.rule)))throw Error(`Rule should be one of these types: ${Object.values(p).join(", ")}. Provided value: ${e.rule}`)}));const r=this.setKeyByFieldSelector(e);return this.fields[r]={elem:s,rules:t,isValid:void 0,touched:!1,config:i},this.setListeners(s),(this.isSubmitted||this.globalConfig.validateBeforeSubmitting)&&this.validateField(r),this}removeField(e){if("string"!=typeof e&&!f(e))throw Error("Field selector is not valid. Please specify a string selector or a valid DOM element.");const t=this.getKeyByFieldSelector(e);if(!t||!this.fields[t])return console.error("Field not found. Check the field selector."),this;const i=this.getListenerType(this.fields[t].elem.type);return this.removeListener(i,this.fields[t].elem,this.handlerChange),this.clearErrors(),delete this.fields[t],this}removeGroup(e){if("string"!=typeof e)throw Error("Group selector is not valid. Please specify a string selector.");const t=this.getKeyByFieldSelector(e);return t&&this.groupFields[t]?(this.groupFields[t].elems.forEach((e=>{const t=this.getListenerType(e.type);this.removeListener(t,e,this.handlerChange)})),this.clearErrors(),delete this.groupFields[t],this):(console.error("Group not found. Check the group selector."),this)}addRequiredGroup(e,t,i,s){if("string"!=typeof e&&!f(e))throw Error("Group selector is not valid. Please specify a string selector or a valid DOM element.");let r;if(r="string"==typeof e?this.form.querySelector(e):e,!r)throw Error("Group selector not found! Please check the group selector.");const n=r.querySelectorAll("input"),a=Array.from(n).filter((e=>{const t=((e,t)=>{const i=[...t].reverse();for(let t=0,s=i.length;t<s;++t){const s=i[t];for(const t in e){const i=e[t];if(i.groupElem===s)return[t,i]}}return null})(this.groupFields,(e=>{let t=e;const i=[];for(;t;)i.unshift(t),t=t.parentNode;return i})(e));return!t||t[1].elems.find((t=>t!==e))})),o=this.setKeyByFieldSelector(e);return this.groupFields[o]={rules:[{rule:c.Required,errorMessage:t,successMessage:s}],groupElem:r,elems:a,touched:!1,isValid:void 0,config:i},n.forEach((e=>{this.setListeners(e)})),this}getListenerType(e){switch(e){case"checkbox":case"select-one":case"file":case"radio":return"change";default:return"input"}}setListeners(e){const t=this.getListenerType(e.type);this.removeListener(t,e,this.handlerChange),this.addListener(t,e,this.handlerChange)}clearFieldLabel(e){var t,i;null==(t=this.errorLabels[e])||t.remove(),null==(i=this.successLabels[e])||i.remove()}clearFieldStyle(e){var t,i,s,r;const n=this.fields[e],a=(null==(t=n.config)?void 0:t.errorFieldStyle)||this.globalConfig.errorFieldStyle;Object.keys(a).forEach((e=>{n.elem.style[e]=""}));const o=(null==(i=n.config)?void 0:i.successFieldStyle)||this.globalConfig.successFieldStyle||{};Object.keys(o).forEach((e=>{n.elem.style[e]=""})),n.elem.classList.remove(...A((null==(s=n.config)?void 0:s.errorFieldCssClass)||this.globalConfig.errorFieldCssClass),...A((null==(r=n.config)?void 0:r.successFieldCssClass)||this.globalConfig.successFieldCssClass))}clearErrors(){var e,t;Object.keys(this.errorLabels).forEach((e=>this.errorLabels[e].remove())),Object.keys(this.successLabels).forEach((e=>this.successLabels[e].remove()));for(const e in this.fields)this.clearFieldStyle(e);for(const i in this.groupFields){const s=this.groupFields[i],r=(null==(e=s.config)?void 0:e.errorFieldStyle)||this.globalConfig.errorFieldStyle;Object.keys(r).forEach((e=>{s.elems.forEach((t=>{var i;t.style[e]="",t.classList.remove(...A((null==(i=s.config)?void 0:i.errorFieldCssClass)||this.globalConfig.errorFieldCssClass))}))}));const n=(null==(t=s.config)?void 0:t.successFieldStyle)||this.globalConfig.successFieldStyle||{};Object.keys(n).forEach((e=>{s.elems.forEach((t=>{var i;t.style[e]="",t.classList.remove(...A((null==(i=s.config)?void 0:i.successFieldCssClass)||this.globalConfig.successFieldCssClass))}))}))}this.tooltips=[]}isTooltip(){return!!this.globalConfig.tooltip}lockForm(){const e=this.form.querySelectorAll("input, textarea, button, select");for(let t=0,i=e.length;t<i;++t)e[t].setAttribute("data-just-validate-fallback-disabled",e[t].disabled?"true":"false"),e[t].setAttribute("disabled","disabled"),e[t].style.pointerEvents="none",e[t].style.webkitFilter="grayscale(100%)",e[t].style.filter="grayscale(100%)"}unlockForm(){const e=this.form.querySelectorAll("input, textarea, button, select");for(let t=0,i=e.length;t<i;++t)"true"!==e[t].getAttribute("data-just-validate-fallback-disabled")&&e[t].removeAttribute("disabled"),e[t].style.pointerEvents="",e[t].style.webkitFilter="",e[t].style.filter=""}renderTooltip(e,t,i){var s;const{top:r,left:n,width:a,height:o}=e.getBoundingClientRect(),l=t.getBoundingClientRect(),d=i||(null==(s=this.globalConfig.tooltip)?void 0:s.position);switch(d){case"left":t.style.top=r+o/2-l.height/2+"px",t.style.left=n-l.width-5+"px";break;case"top":t.style.top=r-l.height-5+"px",t.style.left=n+a/2-l.width/2+"px";break;case"right":t.style.top=r+o/2-l.height/2+"px",t.style.left=`${n+a+5}px`;break;case"bottom":t.style.top=`${r+o+5}px`,t.style.left=n+a/2-l.width/2+"px"}return t.dataset.direction=d,{refresh:()=>{this.renderTooltip(e,t,i)}}}createErrorLabelElem(e,t,i){const s=document.createElement("div");s.innerHTML=t;const r=this.isTooltip()?null==i?void 0:i.errorLabelStyle:(null==i?void 0:i.errorLabelStyle)||this.globalConfig.errorLabelStyle;return Object.assign(s.style,r),s.classList.add(...A((null==i?void 0:i.errorLabelCssClass)||this.globalConfig.errorLabelCssClass),"just-validate-error-label"),this.isTooltip()&&(s.dataset.tooltip="true"),this.globalConfig.testingMode&&(s.dataset.testId=`error-label-${e}`),this.errorLabels[e]=s,s}createSuccessLabelElem(e,t,i){if(void 0===t)return null;const s=document.createElement("div");s.innerHTML=t;const r=(null==i?void 0:i.successLabelStyle)||this.globalConfig.successLabelStyle;return Object.assign(s.style,r),s.classList.add(...A((null==i?void 0:i.successLabelCssClass)||this.globalConfig.successLabelCssClass),"just-validate-success-label"),this.globalConfig.testingMode&&(s.dataset.testId=`success-label-${e}`),this.successLabels[e]=s,s}renderErrorsContainer(e,t){const i=t||this.globalConfig.errorsContainer;if("string"==typeof i){const t=this.form.querySelector(i);if(t)return t.appendChild(e),!0;console.error(`Error container with ${i} selector not found. Errors will be rendered as usual`)}return i instanceof Element?(i.appendChild(e),!0):(void 0!==i&&console.error("Error container not found. It should be a string or existing Element. Errors will be rendered as usual"),!1)}renderGroupLabel(e,t,i,s){!s&&this.renderErrorsContainer(t,i)||e.appendChild(t)}renderFieldLabel(e,t,i,s){var r,n,a,o,l,d,p;if(s||!this.renderErrorsContainer(t,i))if("checkbox"===e.type||"radio"===e.type){const i=document.querySelector(`label[for="${e.getAttribute("id")}"]`);"label"===(null==(n=null==(r=e.parentElement)?void 0:r.tagName)?void 0:n.toLowerCase())?null==(o=null==(a=e.parentElement)?void 0:a.parentElement)||o.appendChild(t):i?null==(l=i.parentElement)||l.appendChild(t):null==(d=e.parentElement)||d.appendChild(t)}else null==(p=e.parentElement)||p.appendChild(t)}showLabels(e,t){Object.keys(e).forEach(((i,s)=>{const r=e[i],n=this.getKeyByFieldSelector(i);if(!n||!this.fields[n])return void console.error("Field not found. Check the field selector.");const a=this.fields[n];a.isValid=!t,this.clearFieldStyle(n),this.clearFieldLabel(n),this.renderFieldError(n,!1,r),0===s&&this.globalConfig.focusInvalidField&&setTimeout((()=>a.elem.focus()),0)}))}showErrors(e){if("object"!=typeof e)throw Error("[showErrors]: Errors should be an object with key: value format");this.showLabels(e,!0)}showSuccessLabels(e){if("object"!=typeof e)throw Error("[showSuccessLabels]: Labels should be an object with key: value format");this.showLabels(e,!1)}renderFieldError(e,t=!1,i){var s,r,n,a,o,l;const d=this.fields[e];if(!1===d.isValid&&(this.isValid=!1),void 0===d.isValid||!t&&!this.isSubmitted&&!d.touched&&void 0===i)return;if(d.isValid){if(!d.asyncCheckPending){const t=this.createSuccessLabelElem(e,void 0!==i?i:d.successMessage,d.config);t&&this.renderFieldLabel(d.elem,t,null==(s=d.config)?void 0:s.errorsContainer,!0),d.elem.classList.add(...A((null==(r=d.config)?void 0:r.successFieldCssClass)||this.globalConfig.successFieldCssClass))}return}d.elem.classList.add(...A((null==(n=d.config)?void 0:n.errorFieldCssClass)||this.globalConfig.errorFieldCssClass));const p=this.createErrorLabelElem(e,void 0!==i?i:d.errorMessage,d.config);this.renderFieldLabel(d.elem,p,null==(a=d.config)?void 0:a.errorsContainer),this.isTooltip()&&this.tooltips.push(this.renderTooltip(d.elem,p,null==(l=null==(o=d.config)?void 0:o.tooltip)?void 0:l.position))}renderGroupError(e,t=!0){var i,s,r,n;const a=this.groupFields[e];if(!1===a.isValid&&(this.isValid=!1),void 0===a.isValid||!t&&!this.isSubmitted&&!a.touched)return;if(a.isValid){a.elems.forEach((e=>{var t,i;Object.assign(e.style,(null==(t=a.config)?void 0:t.successFieldStyle)||this.globalConfig.successFieldStyle),e.classList.add(...A((null==(i=a.config)?void 0:i.successFieldCssClass)||this.globalConfig.successFieldCssClass))}));const t=this.createSuccessLabelElem(e,a.successMessage,a.config);return void(t&&this.renderGroupLabel(a.groupElem,t,null==(i=a.config)?void 0:i.errorsContainer,!0))}this.isValid=!1,a.elems.forEach((e=>{var t,i;Object.assign(e.style,(null==(t=a.config)?void 0:t.errorFieldStyle)||this.globalConfig.errorFieldStyle),e.classList.add(...A((null==(i=a.config)?void 0:i.errorFieldCssClass)||this.globalConfig.errorFieldCssClass))}));const o=this.createErrorLabelElem(e,a.errorMessage,a.config);this.renderGroupLabel(a.groupElem,o,null==(s=a.config)?void 0:s.errorsContainer),this.isTooltip()&&this.tooltips.push(this.renderTooltip(a.groupElem,o,null==(n=null==(r=a.config)?void 0:r.tooltip)?void 0:n.position))}renderErrors(e=!1){if(this.isSubmitted||e||this.globalConfig.validateBeforeSubmitting){this.clearErrors(),this.isValid=!0;for(const e in this.groupFields)this.renderGroupError(e);for(const e in this.fields)this.renderFieldError(e)}}destroy(){this.eventListeners.forEach((e=>{this.removeListener(e.type,e.elem,e.func)})),Object.keys(this.customStyleTags).forEach((e=>{this.customStyleTags[e].remove()})),this.clearErrors(),this.globalConfig.lockForm&&this.unlockForm()}refresh(){this.destroy(),this.form?(this.initialize(this.form,this.globalConfig),Object.keys(this.fields).forEach((e=>{const t=this.getFieldSelectorByKey(e);t&&this.addField(t,[...this.fields[e].rules],this.fields[e].config)}))):console.error("Cannot initialize the library! Form is not defined")}setCurrentLocale(e){"string"==typeof e||void 0===e?(this.currentLocale=e,this.isSubmitted&&this.validate()):console.error("Current locale should be a string")}onSuccess(e){return this.onSuccessCallback=e,this}onFail(e){return this.onFailCallback=e,this}onValidate(e){return this.onValidateCallback=e,this}}("#basic_form").addField("#basic_name",[{rule:"required",errorMessage:"必須入力項目です。"},{rule:"minLength",value:3,errorMessage:"3文字以上で入力してください。"},{rule:"maxLength",value:15,errorMessage:"最大入力文字数は15文字です。"}]).addField("#basic_email",[{rule:"required",errorMessage:"必須入力項目です。"},{rule:"email",errorMessage:"形式が正しくありません。"}]).addField("#basic_password",[{rule:"required",errorMessage:"必須入力項目です。"},{rule:"password",errorMessage:"パスワードは8文字以上で入力してください。その際に数字を1文字以上含める必要があります。"}]).addField("#basic_age",[{rule:"required",errorMessage:"必須入力項目です。"},{rule:"number",errorMessage:"数字で入力してください。"},{rule:"minNumber",value:18,errorMessage:"18以上の数字を入力してください。"},{rule:"maxNumber",value:150,errorMessage:"18以上の数字を入力してください。"}]).addField("#basic_address",[{rule:"required",errorMessage:"必須入力項目です。"}]).onSuccess((function(e){let t=new FormData(e.target);console.log(t.get("name")),console.log(t.get("email")),console.log(t.get("password")),console.log(t.get("age")),console.log(t.get("address"))}));const tt=new Te(".swiper-1",{direction:"horizontal",loop:!0,pagination:{el:".swiper-pagination"},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}});let it=document.createTextNode("スライド"+tt.realIndex+"を表示しています。"),st=document.getElementById("swiper-title");st.appendChild(it),tt.on("slideChange",(function(){console.log("slide changed"),console.log(tt.realIndex),it.remove(),it=document.createTextNode("スライド"+tt.realIndex+"を表示しています。"),st.appendChild(it)}));const rt=new Te(".swiper-2",{direction:"horizontal",loop:!0,pagination:{el:".swiper-pagination"},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},scrollbar:{el:".swiper-scrollbar"}}),nt=["ぴえんのイラスト（男性）","浮かれる人のイラスト（女性）","怖くて腰が抜ける人のイラスト（女性）","悔しくてハンカチを噛む人のイラスト（男性）"];let at=document.createTextNode(nt[rt.realIndex]),ot=document.getElementById("swiper-title-2");ot.appendChild(at),rt.on("slideChange",(function(){at.remove(),at=document.createTextNode(nt[rt.realIndex]),ot.appendChild(at)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,