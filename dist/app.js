/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";const e="undefined"!=typeof window,t=e?window:null,n=e?document:null,r={replace:0,none:1,blend:2},s=Symbol(),i=Symbol(),o=Symbol(),a=Symbol(),l=(Symbol(),Symbol()),u=1e-11,d=1e12,c=1e3,h="",_=new Map;_.set("x","translateX"),_.set("y","translateY"),_.set("z","translateZ");const p=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],m=p.reduce(((e,t)=>({...e,[t]:t+"("})),{}),f=()=>{},y=/(^#([\da-f]{3}){1,2}$)|(^#([\da-f]{4}){1,2}$)/i,g=/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i,b=/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(-?\d+|-?\d*.\d+)\s*\)/i,T=/hsl\(\s*(-?\d+|-?\d*.\d+)\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)%\s*\)/i,v=/hsla\(\s*(-?\d+|-?\d*.\d+)\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)%\s*,\s*(-?\d+|-?\d*.\d+)\s*\)/i,N=/[-+]?\d*\.?\d+(?:e[-+]?\d)?/gi,C=/^([-+]?\d*\.?\d+(?:e[-+]?\d+)?)([a-z]+|%)$/i,D=/([a-z])([A-Z])/g,k=/(\w+)(\([^)]+\)+)/g,x={id:null,keyframes:null,playbackEase:null,playbackRate:1,frameRate:120,loop:0,reversed:!1,alternate:!1,autoplay:!0,duration:c,delay:0,loopDelay:0,ease:"out(2)",composition:r.replace,modifier:e=>e,onBegin:f,onBeforeUpdate:f,onUpdate:f,onLoop:f,onPause:f,onComplete:f,onRender:f},S={defaults:x,root:n,scope:null,precision:4,timeScale:1,tickThreshold:200},w={version:"4.0.2",engine:null};e&&(t.AnimeJS||(t.AnimeJS=[]),t.AnimeJS.push(w));const I=(e,t)=>0===e.indexOf(t),R=Date.now,E=Array.isArray,M=e=>e&&e.constructor===Object,A=e=>"string"==typeof e,O=e=>"function"==typeof e,$=e=>void 0===e,P=e=>$(e)||null===e,B=t=>e&&t instanceof SVGElement,q=e=>y.test(e),L=e=>I(e,"rgb"),U=e=>I(e,"hsl"),F=e=>!S.defaults.hasOwnProperty(e),X=e=>A(e)?parseFloat(e):e,Y=Math.pow,Z=Math.sqrt,j=Math.sin,z=Math.cos,W=Math.abs,H=(Math.exp,Math.ceil),J=Math.floor,Q=Math.asin,V=(Math.max,Math.atan2,Math.PI),G=Math.round,K=(e,t,n)=>e<t?t:e>n?n:e,ee={},te=(e,t)=>{if(t<0)return e;if(!t)return G(e);let n=ee[t];return n||(n=ee[t]=10**t),G(e*n)/n},ne=(e,t,n)=>e+(t-e)*n,re=e=>e===1/0?d:e===-1/0?-1e12:e,se=e=>e<=u?u:re(te(e,11)),ie=e=>E(e)?[...e]:e,oe=(e,t,n,r="_prev",s="_next")=>{let i=e._head,o=s;for(n&&(i=e._tail,o=r);i;){const e=i[o];t(i),i=e}},ae=(e,t,n="_prev",r="_next")=>{const s=t[n],i=t[r];s?s[r]=i:e._head=i,i?i[n]=s:e._tail=s,t[n]=null,t[r]=null},le=(e,t,n,r="_prev",s="_next")=>{let i=e._tail;for(;i&&n&&n(i,t);)i=i[r];const o=i?i[s]:e._head;i?i[s]=t:e._head=t,o?o[r]=t:e._tail=t,t[r]=i,t[s]=o};class ue{constructor(e=0){this.deltaTime=0,this._currentTime=e,this._elapsedTime=e,this._startTime=e,this._lastTime=e,this._scheduledTime=0,this._frameDuration=te(c/120,0),this._fps=120,this._speed=1,this._hasChildren=!1,this._head=null,this._tail=null}get fps(){return this._fps}set fps(e){const t=this._frameDuration,n=+e,r=n<u?u:n,s=te(c/r,0);this._fps=r,this._frameDuration=s,this._scheduledTime+=s-t}get speed(){return this._speed}set speed(e){const t=+e;this._speed=t<u?u:t}requestTick(e){const t=this._scheduledTime,n=this._elapsedTime;if(this._elapsedTime+=e-n,n<t)return 0;const r=this._frameDuration,s=n-t;return this._scheduledTime+=s<r?r:s,1}computeDeltaTime(e){const t=e-this._lastTime;return this.deltaTime=t,this._lastTime=e,t}}const de=(e,t,n,s,i)=>{const o=e.parent,l=e.duration,d=e.completed,c=e.iterationDuration,_=e.iterationCount,p=e._currentIteration,f=e._loopDelay,y=e._reversed,g=e._alternate,b=e._hasChildren,T=e._delay,v=e._currentTime,N=T+c,C=t-T,D=K(v,-T,l),k=K(C,-T,l),x=C-v,w=k>0,I=k>=l,R=l<=u,E=2===i;let M=0,A=C,O=0;if(_>1){const t=~~(k/(c+(I?0:f)));e._currentIteration=K(t,0,_),I&&e._currentIteration--,M=e._currentIteration%2,A=k%(c+f)||0}const $=y^(g&&M),P=e._ease;let B=I?$?0:l:$?c-A:A;P&&(B=c*P(B/c)||0);const q=(o?o.backwards:C<v)?!$:!!$;if(e._currentTime=C,e._iterationTime=B,e.backwards=q,w&&!e.began?(e.began=!0,n||o&&(q||!o.began)||e.onBegin(e)):C<=0&&(e.began=!1),n||b||!w||e._currentIteration===p||e.onLoop(e),E||1===i&&(t>=T&&t<=N||t<=T&&D>T||t>=N&&D!==l)||B>=N&&D!==l||B<=T&&D>0||t<=D&&D===l&&d||I&&!d&&R){if(w&&(e.computeDeltaTime(D),n||e.onBeforeUpdate(e)),!b){const t=E||(q?-1*x:x)>=S.tickThreshold,i=e._offset+(o?o._offset:0)+T+B;let l,u,d,c,_=e._head,p=0;for(;_;){const e=_._composition,n=_._currentTime,o=_._changeDuration,f=_._absoluteStartTime+_._changeDuration,y=_._nextRep,g=_._prevRep,b=e!==r.none;if((t||(n!==o||i<=f+(y?y._delay:0))&&(0!==n||i>=_._absoluteStartTime))&&(!b||!_._isOverridden&&(!_._isOverlapped||i<=f)&&(!y||y._isOverridden||i<=y._absoluteStartTime)&&(!g||g._isOverridden||i>=g._absoluteStartTime+g._changeDuration+_._delay))){const t=_._currentTime=K(B-_._startTime,0,o),n=_._ease(t/_._updateDuration),i=_._modifier,h=_._valueType,m=_._tweenType,f=0===m,y=0===h,g=y&&f||0===n||1===n?-1:S.precision;let T,v;if(y)T=v=i(te(ne(_._fromNumber,_._toNumber,n),g));else if(1===h)v=i(te(ne(_._fromNumber,_._toNumber,n),g)),T=`${v}${_._unit}`;else if(2===h){const e=_._fromNumbers,t=_._toNumbers,r=te(K(i(ne(e[0],t[0],n)),0,255),0),s=te(K(i(ne(e[1],t[1],n)),0,255),0),o=te(K(i(ne(e[2],t[2],n)),0,255),0),a=K(i(te(ne(e[3],t[3],n),g)),0,1);if(T=`rgba(${r},${s},${o},${a})`,b){const e=_._numbers;e[0]=r,e[1]=s,e[2]=o,e[3]=a}}else if(3===h){T=_._strings[0];for(let e=0,t=_._toNumbers.length;e<t;e++){const t=i(te(ne(_._fromNumbers[e],_._toNumbers[e],n),g)),r=_._strings[e+1];T+=`${r?t+r:t}`,b&&(_._numbers[e]=t)}}if(b&&(_._number=v),s||e===r.blend)_._value=T;else{const e=_.property;l=_.target,f?l[e]=T:1===m?l.setAttribute(e,T):(u=l.style,3===m?(l!==d&&(d=l,c=l[a]),c[e]=T,p=1):2===m?u[e]=T:4===m&&u.setProperty(e,T)),w&&(O=1)}}if(p&&_._renderTransforms){let e=h;for(let t in c)e+=`${m[t]}${c[t]}) `;u.transform=e,p=0}_=_._next}!n&&O&&e.onRender(e)}!n&&w&&e.onUpdate(e)}return o&&R?!n&&(o.began&&!q&&C>=l&&!d||q&&C<=u&&d)&&(e.onComplete(e),e.completed=!q):w&&I?_===1/0?e._startTime+=e.duration:e._currentIteration>=_-1&&(e.paused=!0,d||b||(e.completed=!0,n||o&&(q||!o.began)||(e.onComplete(e),e._resolve(e)))):e.completed=!1,O},ce=(e,t,n,r,s)=>{const i=e._currentIteration;if(de(e,t,n,r,s),e._hasChildren){const o=e,a=o.backwards,l=r?t:o._iterationTime,d=R();let c=0,h=!0;if(!r&&o._currentIteration!==i){const e=o.iterationDuration;oe(o,(t=>{if(a){const r=t.duration,s=t._offset+t._delay;n||!(r<=u)||s&&s+r!==e||t.onComplete(t)}else!t.completed&&!t.backwards&&t._currentTime<t.iterationDuration&&de(t,e,n,1,2),t.began=!1,t.completed=!1})),n||o.onLoop(o)}oe(o,(e=>{const t=te((l-e._offset)*e._speed,12),i=e._fps<o._fps?e.requestTick(d):s;c+=de(e,t,n,r,i),!e.completed&&h&&(h=!1)}),a),!n&&c&&o.onRender(o),h&&o._currentTime>=o.duration&&(o.paused=!0,o.completed||(o.completed=!0,n||(o.onComplete(o),o._resolve(o))))}},he={animation:null,update:f},_e=e?requestAnimationFrame:setImmediate,pe=e?cancelAnimationFrame:clearImmediate;class me extends ue{constructor(t){super(t),this.useDefaultMainLoop=!0,this.pauseOnDocumentHidden=!0,this.defaults=x,this.paused=!(!e||!n.hidden),this.reqId=null}update(){const e=this._currentTime=R();if(this.requestTick(e)){this.computeDeltaTime(e);const t=this._speed,n=this._fps;let r=this._head;for(;r;){const s=r._next;r.paused?(ae(this,r),this._hasChildren=!!this._tail,r._running=!1,r.completed&&!r._cancelled&&r.cancel()):ce(r,(e-r._startTime)*r._speed*t,0,0,r._fps<n?r.requestTick(e):1),r=s}he.update()}}wake(){return!this.useDefaultMainLoop||this.reqId||this.paused||(this.reqId=_e(ye)),this}pause(){return this.paused=!0,ge()}resume(){if(this.paused)return this.paused=!1,oe(this,(e=>e.resetTime())),this.wake()}get speed(){return this._speed*(1===S.timeScale?1:c)}set speed(e){this._speed=e*S.timeScale,oe(this,(e=>e.speed=e._speed))}get timeUnit(){return 1===S.timeScale?"ms":"s"}set timeUnit(e){const t="s"===e,n=t?.001:1;if(S.timeScale!==n){S.timeScale=n,S.tickThreshold=200*n;const e=t?.001:c;this.defaults.duration*=e,this._speed*=e}}get precision(){return S.precision}set precision(e){S.precision=e}}const fe=(()=>{const t=new me(R());return e&&(w.engine=t,n.addEventListener("visibilitychange",(()=>{t.pauseOnDocumentHidden&&(n.hidden?t.pause():t.resume())}))),t})(),ye=()=>{fe._head?(fe.reqId=_e(ye),fe.update()):fe.reqId=0},ge=()=>(pe(fe.reqId),fe.reqId=0,fe);function be(e){const t=A(e)?S.root.querySelectorAll(e):e;if(t instanceof NodeList||t instanceof HTMLCollection)return t}function Te(t){if(P(t))return[];if(E(t)){const e=t.flat(1/0),n=[];for(let t=0,r=e.length;t<r;t++){const r=e[t];if(!P(r)){const e=be(r);if(e)for(let t=0,r=e.length;t<r;t++){const r=e[t];if(!P(r)){let e=!1;for(let t=0,s=n.length;t<s;t++)if(n[t]===r){e=!0;break}e||n.push(r)}}else{let e=!1;for(let t=0,s=n.length;t<s;t++)if(n[t]===r){e=!0;break}e||n.push(r)}}}return n}if(!e)return[t];const n=be(t);return n?Array.from(n):[t]}function ve(e){const t=Te(e),n=t.length;if(n)for(let e=0;e<n;e++){const n=t[e];if(!n[s]){n[s]=!0;const e=B(n);(n.nodeType||e)&&(n[i]=!0,n[o]=e,n[a]={})}}return t}const Ne=["opacity","rotate","overflow","color"],Ce=(e,t,n)=>(n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e),De=(e,t)=>$(e)?t:e,ke=(e,t,n,r,s)=>{if(O(e)){const i=()=>{const s=e(t,n,r);return isNaN(+s)?s||0:+s};return s&&(s.func=i),i()}return e},xe=(e,t)=>e[i]?e[o]&&((e,t)=>{if(Ne.includes(t))return!1;if(e.getAttribute(t)||t in e){if("scale"===t){const t=e.parentNode;return t&&"filter"===t.tagName}return!0}})(e,t)?1:p.includes(t)||_.get(t)?3:I(t,"--")?4:t in e.style?2:t in e?0:1:0,Se=(e,t,n)=>{const r=e.style[t];r&&n&&(n[t]=r);const s=r||getComputedStyle(e[l]||e).getPropertyValue(t);return"auto"===s?"0":s},we=(e,t,n,r)=>{const s=$(n)?xe(e,t):n;return 0===s?e[t]||0:1===s?e.getAttribute(t):3===s?((e,t,n)=>{const r=e.style.transform;let s;if(r){const i=e[a];let o;for(;o=k.exec(r);){const e=o[1],r=o[2].slice(1,-1);i[e]=r,e===t&&(s=r,n&&(n[t]=r))}}return r&&!$(s)?s:I(t,"scale")?"1":I(t,"rotate")||I(t,"skew")?"0deg":"0px"})(e,t,r):4===s?Se(e,t,r).trimStart():Se(e,t,r)},Ie=(e,t,n)=>"-"===n?e-t:"+"===n?e+t:e*t,Re=(e,t)=>{if(t.t=0,t.n=0,t.u=null,t.o=null,t.d=null,t.s=null,!e)return t;const n=+e;if(isNaN(n)){let n=e;"="===n[1]&&(t.o=n[0],n=n.slice(2));const i=!n.includes(" ")&&C.exec(n);if(i)return t.t=1,t.n=+i[1],t.u=i[2],t;if(t.o)return t.n=+n,t;if(q(s=n)||L(s)||U(s))return t.t=2,t.d=L(r=n)?(e=>{const t=g.exec(e)||b.exec(e),n=$(t[4])?1:+t[4];return[+t[1],+t[2],+t[3],n]})(r):q(r)?(e=>{const t=e.length,n=4===t||5===t;return[+("0x"+e[1]+e[n?1:2]),+("0x"+e[n?2:3]+e[n?2:4]),+("0x"+e[n?3:5]+e[n?3:6]),5===t||9===t?+(+("0x"+e[n?4:7]+e[n?4:8])/255).toFixed(3):1]})(r):U(r)?(e=>{const t=T.exec(e)||v.exec(e),n=+t[1]/360,r=+t[2]/100,s=+t[3]/100,i=$(t[4])?1:+t[4];let o,a,l;if(0===r)o=a=l=s;else{const e=s<.5?s*(1+r):s+r-s*r,t=2*s-e;o=te(255*Ce(t,e,n+1/3),0),a=te(255*Ce(t,e,n),0),l=te(255*Ce(t,e,n-1/3),0)}return[o,a,l,i]})(r):[0,0,0,1],t;{const e=n.match(N);return t.t=3,t.d=e?e.map(Number):[],t.s=n.split(N)||[],t}}var r,s;return t.n=n,t},Ee=(e,t)=>(t.t=e._valueType,t.n=e._toNumber,t.u=e._unit,t.o=null,t.d=ie(e._toNumbers),t.s=ie(e._strings),t),Me={t:0,n:0,u:null,o:null,d:null,s:null},Ae={_rep:new WeakMap,_add:new Map},Oe=(e,t,n="_rep")=>{const r=Ae[n];let s=r.get(e);return s||(s={},r.set(e,s)),s[t]?s[t]:s[t]={_head:null,_tail:null}},$e=(e,t)=>e._isOverridden||e._absoluteStartTime>t._absoluteStartTime,Pe=e=>{e._isOverlapped=1,e._isOverridden=1,e._changeDuration=u,e._currentTime=u},Be=(e,t)=>{const n=e._composition;if(n===r.replace){const n=e._absoluteStartTime;le(t,e,$e,"_prevRep","_nextRep");const r=e._prevRep;if(r){const t=r.parent,s=r._absoluteStartTime+r._changeDuration;if(e.parent.id!==t.id&&t.iterationCount>1&&s+(t.duration-t.iterationDuration)>n){Pe(r);let e=r._prevRep;for(;e&&e.parent.id===t.id;)Pe(e),e=e._prevRep}const i=n-e._delay;if(s>i){const e=r._startTime,t=s-(e+r._updateDuration);r._changeDuration=i-t-e,r._currentTime=r._changeDuration,r._isOverlapped=1,r._changeDuration<u&&Pe(r)}let o=!0;if(oe(t,(e=>{e._isOverlapped||(o=!1)})),o){const e=t.parent;if(e){let n=!0;oe(e,(e=>{e!==t&&oe(e,(e=>{e._isOverlapped||(n=!1)}))})),n&&e.cancel()}else t.cancel()}}}else if(n===r.blend){const t=Oe(e.target,e.property,"_add"),n=(e=>{let t=he.animation;return t||(t={duration:u,computeDeltaTime:f,_offset:0,_delay:0,_head:null,_tail:null},he.animation=t,he.update=()=>{e.forEach((e=>{for(let t in e){const n=e[t],r=n._head;if(r){const e=r._valueType,t=3===e||2===e?ie(r._fromNumbers):null;let s=r._fromNumber,i=n._tail;for(;i&&i!==r;){if(t)for(let e=0,n=i._numbers.length;e<n;e++)t[e]+=i._numbers[e];else s+=i._number;i=i._prevAdd}r._toNumber=s,r._toNumbers=t}}})),de(t,1,1,0,2)}),t})(Ae._add);let s=t._head;s||(s={...e},s._composition=r.replace,s._updateDuration=u,s._startTime=0,s._numbers=ie(e._fromNumbers),s._number=0,s._next=null,s._prev=null,le(t,s),le(n,s));const i=e._toNumber;if(e._fromNumber=s._fromNumber-i,e._toNumber=0,e._numbers=ie(e._fromNumbers),e._number=0,s._fromNumber=i,e._toNumbers){const t=ie(e._toNumbers);t&&t.forEach(((t,n)=>{e._fromNumbers[n]=s._fromNumbers[n]-t,e._toNumbers[n]=0})),s._fromNumbers=t}le(t,e,null,"_prevAdd","_nextAdd")}return e},qe=e=>{const t=e._composition;if(t!==r.none){const n=e.target,s=e.property,i=Ae._rep.get(n)[s];if(ae(i,e,"_prevRep","_nextRep"),t===r.blend){const t=Ae._add,r=t.get(n);if(!r)return;const i=r[s],o=he.animation;ae(i,e,"_prevAdd","_nextAdd");const a=i._head;if(a&&a===i._tail){ae(i,a,"_prevAdd","_nextAdd"),ae(o,a);let e=!0;for(let t in r)if(r[t]._head){e=!1;break}e&&t.delete(n)}}}return e},Le=e=>(e.paused=!0,e.began=!1,e.completed=!1,e),Ue=e=>e._cancelled?(e._hasChildren?oe(e,Ue):oe(e,(e=>{e._composition!==r.none&&Be(e,Oe(e.target,e.property))})),e._cancelled=0,e):e;let Fe=0;class Xe extends ue{constructor(e={},t=null,n=0){super(0);const{id:r,delay:s,duration:i,reversed:o,alternate:a,loop:l,loopDelay:d,autoplay:c,frameRate:h,playbackRate:_,onComplete:p,onLoop:m,onPause:y,onBegin:g,onBeforeUpdate:b,onUpdate:T}=e;S.scope&&S.scope.revertibles.push(this);const v=t?0:fe._elapsedTime,N=t?t.defaults:S.defaults,C=O(s)||$(s)?N.delay:+s,D=O(i)||$(i)?1/0:+i,k=De(l,N.loop),x=De(d,N.loopDelay),w=!0===k||k===1/0||k<0?1/0:k+1;let I=0;if(t)I=n;else{let e=R();fe.paused&&(fe.requestTick(e),e=fe._elapsedTime),I=e-fe._startTime}this.id=$(r)?++Fe:r,this.parent=t,this.duration=re((D+x)*w-x)||u,this.backwards=!1,this.paused=!0,this.began=!1,this.completed=!1,this.onBegin=g||N.onBegin,this.onBeforeUpdate=b||N.onBeforeUpdate,this.onUpdate=T||N.onUpdate,this.onLoop=m||N.onLoop,this.onPause=y||N.onPause,this.onComplete=p||N.onComplete,this.iterationDuration=D,this.iterationCount=w,this._autoplay=!t&&De(c,N.autoplay),this._offset=I,this._delay=C,this._loopDelay=x,this._iterationTime=0,this._currentIteration=0,this._resolve=f,this._running=!1,this._reversed=+De(o,N.reversed),this._reverse=this._reversed,this._cancelled=0,this._alternate=De(a,N.alternate),this._prev=null,this._next=null,this._elapsedTime=v,this._startTime=v,this._lastTime=v,this._fps=De(h,N.frameRate),this._speed=De(_,N.playbackRate)}get cancelled(){return!!this._cancelled}set cancelled(e){e?this.cancel():this.reset(1).play()}get currentTime(){return K(te(this._currentTime,S.precision),-this._delay,this.duration)}set currentTime(e){const t=this.paused;this.pause().seek(+e),t||this.resume()}get iterationCurrentTime(){return te(this._iterationTime,S.precision)}set iterationCurrentTime(e){this.currentTime=this.iterationDuration*this._currentIteration+e}get progress(){return K(te(this._currentTime/this.duration,5),0,1)}set progress(e){this.currentTime=this.duration*e}get iterationProgress(){return K(te(this._iterationTime/this.iterationDuration,5),0,1)}set iterationProgress(e){const t=this.iterationDuration;this.currentTime=t*this._currentIteration+t*e}get currentIteration(){return this._currentIteration}set currentIteration(e){this.currentTime=this.iterationDuration*K(+e,0,this.iterationCount-1)}get reversed(){return!!this._reversed}set reversed(e){e?this.reverse():this.play()}get speed(){return super.speed}set speed(e){super.speed=e,this.resetTime()}reset(e=0){return Ue(this),this._reversed&&!this._reverse&&(this.reversed=!1),this._iterationTime=this.iterationDuration,ce(this,0,1,e,2),Le(this),this._hasChildren&&oe(this,Le),this}init(e=0){this.fps=this._fps,this.speed=this._speed,!e&&this._hasChildren&&ce(this,this.duration,1,e,2),this.reset(e);const t=this._autoplay;return!0===t?this.resume():t&&!$(t.linked)&&t.link(this),this}resetTime(){const e=1/(this._speed*fe._speed);return this._startTime=R()-(this._currentTime+this._delay)*e,this}pause(){return this.paused||(this.paused=!0,this.onPause(this)),this}resume(){return this.paused?(this.paused=!1,this.duration<=u&&!this._hasChildren?ce(this,u,0,0,2):(this._running||(le(fe,this),fe._hasChildren=!0,this._running=!0),this.resetTime(),this._startTime-=12,fe.wake()),this):this}restart(){return this.reset(0).resume()}seek(e,t=0,n=0){Ue(this),this.completed=!1;const r=this.paused;return this.paused=!0,ce(this,e+this._delay,~~t,~~n,1),r?this:this.resume()}alternate(){const e=this._reversed,t=this.iterationCount,n=this.iterationDuration,r=t===1/0?J(d/n):t;return this._reversed=+(!this._alternate||r%2?!e:e),t===1/0?this.iterationProgress=this._reversed?1-this.iterationProgress:this.iterationProgress:this.seek(n*r-this._currentTime),this.resetTime(),this}play(){return this._reversed&&this.alternate(),this.resume()}reverse(){return this._reversed||this.alternate(),this.resume()}cancel(){return this._hasChildren?oe(this,(e=>e.cancel()),!0):oe(this,qe),this._cancelled=1,this.pause()}stretch(e){const t=this.duration,n=se(e);if(t===n)return this;const r=e/t,s=e<=u;return this.duration=s?u:n,this.iterationDuration=s?u:se(this.iterationDuration*r),this._offset*=r,this._delay*=r,this._loopDelay*=r,this}revert(){ce(this,0,1,0,1);const e=this._autoplay;return e&&e.linked&&e.linked===this&&e.revert(),this.cancel()}complete(){return this.seek(this.duration).cancel()}then(e=f){const t=this.then,n=()=>{this.then=null,e(this),this.then=t,this._resolve=f};return new Promise((e=>(this._resolve=()=>e(n()),this.completed&&this._resolve(),this)))}}const Ye=e=>e,Ze=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,je=(e=.5,t=0,n=.5,r=1)=>e===t&&n===r?Ye:s=>0===s||1===s?s:Ze(((e,t,n)=>{let r,s,i=0,o=1,a=0;do{s=i+(o-i)/2,r=Ze(s,t,n)-e,r>0?o=s:i=s}while(W(r)>1e-7&&++a<100);return s})(s,e,n),t,r),ze=(e=10,t)=>{const n=t?H:J;return t=>n(K(t,0,1)*e)*(1/e)},We=(...e)=>{const t=e.length;if(!t)return Ye;const n=t-1,r=e[0],s=e[n],i=[0],o=[X(r)];for(let t=1;t<n;t++){const r=e[t],s=A(r)?r.trim().split(" "):[r],a=s[0],l=s[1];i.push($(l)?t/n:X(l)/100),o.push(X(a))}return o.push(X(s)),i.push(1),function(e){for(let t=1,n=i.length;t<n;t++){const n=i[t];if(e<=n){const r=i[t-1],s=o[t-1];return s+(o[t]-s)*(e-r)/(n-r)}}return o[o.length-1]}},He=(e=10,t=1)=>{const n=[0],r=e-1;for(let e=1;e<r;e++){const s=n[e-1],i=e/r,o=i*(1-t)+(i+((e+1)/r-i)*Math.random())*t;n.push(K(o,s,1))}return n.push(1),We(...n)},Je=V/2,Qe=2*V,Ve=(e=1.68)=>t=>Y(t,+e),Ge={[h]:Ve,Quad:Ve(2),Cubic:Ve(3),Quart:Ve(4),Quint:Ve(5),Sine:e=>1-z(e*Je),Circ:e=>1-Z(1-e*e),Expo:e=>e?Y(2,10*e-10):0,Bounce:e=>{let t,n=4;for(;e<((t=Y(2,--n))-1)/11;);return 1/Y(4,3-n)-7.5625*Y((3*t-2)/22-e,2)},Back:(e=1.70158)=>t=>(+e+1)*t*t*t-+e*t*t,Elastic:(e=1,t=.3)=>{const n=K(+e,1,10),r=K(+t,u,2),s=r/Qe*Q(1/n),i=Qe/r;return e=>0===e||1===e?e:-n*Y(2,-10*(1-e))*j((1-e-s)*i)}},Ke={in:e=>t=>e(t),out:e=>t=>1-e(1-t),inOut:e=>t=>t<.5?e(2*t)/2:1-e(-2*t+2)/2,outIn:e=>t=>t<.5?(1-e(1-2*t))/2:(e(2*t-1)+1)/2},et=(()=>{const e={linear:We,irregular:He,steps:ze,cubicBezier:je};for(let t in Ke)for(let n in Ge){const r=Ge[n],s=Ke[t];e[t+n]=n===h||"Back"===n||"Elastic"===n?(e,t)=>s(r(e,t)):s(r)}return e})(),tt={linear:Ye},nt=e=>O(e)?e:A(e)?((e,t,n)=>{if(n[e])return n[e];if(e.indexOf("(")<=-1){const r=Ke[e]||e.includes("Back")||e.includes("Elastic")?t[e]():t[e];return r?n[e]=r:Ye}{const r=e.slice(0,-1).split("("),s=t[r[0]];return s?n[e]=s(...r[1].split(",")):Ye}})(e,et,tt):Ye,rt={},st=(e,t,n)=>{if(3===n){return _.get(e)||e}if(2===n||1===n&&B(t)&&e in t.style){const t=rt[e];if(t)return t;{const t=e?e.replace(D,"$1-$2").toLowerCase():e;return rt[e]=t,t}}return e},it={deg:1,rad:180/V,turn:360},ot={},at=(e,t,r,s=!1)=>{const i=t.u,o=t.n;if(1===t.t&&i===r)return t;const a=o+i+r,l=ot[a];if($(l)||s){let s;if(i in it)s=o*it[i]/it[r];else{const t=100,a=e.cloneNode(),l=e.parentNode,u=l&&l!==n?l:n.body;u.appendChild(a);const d=a.style;d.width=t+i;const c=a.offsetWidth||t;d.width=t+r;const h=c/(a.offsetWidth||t);u.removeChild(a),s=h*o}t.n=s,ot[a]=s}else t.n=l;return t.t,t.u=r,t},lt=e=>{if(e._hasChildren)oe(e,lt,!0);else{const t=e;t.pause(),oe(t,(e=>{const n=e.property,r=e.target;if(r[i]){const s=r.style,i=t._inlineStyles[n];if(3===e._tweenType){const t=r[a];if($(i)||i===h?delete t[n]:t[n]=i,e._renderTransforms)if(Object.keys(t).length){let e=h;for(let n in t)e+=m[n]+t[n]+") ";s.transform=e}else s.removeProperty("transform")}else $(i)||i===h?s.removeProperty(n):s[n]=i;t._tail===e&&t.targets.forEach((e=>{e.getAttribute&&e.getAttribute("style")===h&&e.removeAttribute("style")}))}}))}return e},ut={t:0,n:0,u:null,o:null,d:null,s:null},dt={t:0,n:0,u:null,o:null,d:null,s:null},ct={func:null},ht=[null],_t=[null,null],pt={to:null};let mt,ft,yt=0;class gt extends Xe{constructor(e,t,n,s,i=!1,o=0,a=0){super(t,n,s);const l=ve(e),d=l.length,h=t.keyframes,_=h?((e,t)=>{const n={...e};for(let r in t){const s=e[r];n[r]=$(s)?t[r]:s}return n})(((e,t)=>{const n={};if(E(e)){const t=[].concat(...e.map((e=>Object.keys(e)))).filter(F);for(let r=0,s=t.length;r<s;r++){const s=t[r],i=e.map((e=>{const t={};for(let n in e){const r=e[n];F(n)?n===s&&(t.to=r):t[n]=r}return t}));n[s]=i}}else{const r=De(t.duration,S.defaults.duration),s=Object.keys(e).map((t=>({o:parseFloat(t)/100,p:e[t]}))).sort(((e,t)=>e.o-t.o));s.forEach((e=>{const t=e.o,s=e.p;for(let e in s)if(F(e)){let i=n[e];i||(i=n[e]=[]);const o=t*r;let a=i.length,l=i[a-1];const u={to:s[e]};let d=0;for(let e=0;e<a;e++)d+=i[e].duration;1===a&&(u.from=l.to),s.ease&&(u.ease=s.ease),u.duration=o-(a?d:0),i.push(u)}return e}));for(let e in n){const t=n[e];let r;for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.ease;n.ease=r||void 0,r=s}t[0].duration||t.shift()}}return n})(h,t),t):t,{delay:p,duration:m,ease:f,playbackEase:y,modifier:g,composition:b,onRender:T}=_,v=n?n.defaults:S.defaults,N=De(y,v.playbackEase),C=N?nt(N):null,D=!$(f)&&!$(f.ease),k=D?f.ease:De(f,C?"linear":v.ease),x=D?f.duration:De(m,v.duration),w=De(p,v.delay),I=g||v.modifier,R=$(b)&&d>=c?r.none:$(b)?v.composition:b,A={},O=this._offset+(n?n._offset:0);let P=NaN,B=NaN,q=0,L=0;for(let e=0;e<d;e++){const t=l[e],s=o||e,c=a||d;let h=NaN,p=NaN;for(let e in _)if(F(e)){const o=xe(t,e),a=st(e,t,o);let l=_[e];const d=E(l);if(i&&!d&&(_t[0]=l,_t[1]=l,l=_t),d){const e=l.length,t=!M(l[0]);2===e&&t?(pt.to=l,ht[0]=pt,mt=ht):e>2&&t?(mt=[],l.forEach(((e,t)=>{t?1===t?(_t[1]=e,mt.push(_t)):mt.push(e):_t[0]=e}))):mt=l}else ht[0]=l,mt=ht;let m=null,f=null,y=NaN,g=0,b=0;for(let e=mt.length;b<e;b++){const i=mt[b];M(i)?ft=i:(pt.to=i,ft=pt),ct.func=null;const l=ke(ft.to,t,s,c,ct);let d;M(l)&&!$(l.to)?(ft=l,d=l.to):d=l;const h=ke(ft.from,t,s,c),_=ft.ease,p=!$(_)&&!$(_.ease),T=p?_.ease:_||k,v=p?_.duration:ke(De(ft.duration,e>1?ke(x,t,s,c)/e:x),t,s,c),N=ke(De(ft.delay,b?0:w),t,s,c),C=ke(De(ft.composition,R),t,s,c),D="number"!=typeof(U=C)||isNaN(U)?r[C]:C,S=ft.modifier||I,P=!$(h),B=!$(d),F=E(d),X=F||P&&B,Y=f?g+N:N,Z=O+Y;L||!P&&!F||(L=1);let j=f;if(D!==r.none){m||(m=Oe(t,a));let e=m._head;for(;e&&!e._isOverridden&&e._absoluteStartTime<=Z;)if(j=e,e=e._nextRep,e&&e._absoluteStartTime>=Z)for(;e;)Pe(e),e=e._nextRep}if(X?(Re(F?ke(d[0],t,s,c):h,ut),Re(F?ke(d[1],t,s,c,ct):d,dt),0===ut.t&&(j?1===j._valueType&&(ut.t=1,ut.u=j._unit):(Re(we(t,a,o,A),Me),1===Me.t&&(ut.t=1,ut.u=Me.u)))):(B?Re(d,dt):f?Ee(f,dt):Re(n&&j&&j.parent.parent===n?j._value:we(t,a,o,A),dt),P?Re(h,ut):f?Ee(f,ut):Re(n&&j&&j.parent.parent===n?j._value:we(t,a,o,A),ut)),ut.o&&(ut.n=Ie(j?j._toNumber:Re(we(t,a,o,A),Me).n,ut.n,ut.o)),dt.o&&(dt.n=Ie(ut.n,dt.n,dt.o)),ut.t!==dt.t)if(3===ut.t||3===dt.t){const e=3===ut.t?ut:dt,t=3===ut.t?dt:ut;t.t=3,t.s=ie(e.s),t.d=e.d.map((()=>t.n))}else if(1===ut.t||1===dt.t){const e=1===ut.t?ut:dt,t=1===ut.t?dt:ut;t.t=1,t.u=e.u}else if(2===ut.t||2===dt.t){const e=2===ut.t?ut:dt,t=2===ut.t?dt:ut;t.t=2,t.s=e.s,t.d=[0,0,0,1]}if(ut.u!==dt.u){let e=dt.u?ut:dt;e=at(t,e,dt.u?dt.u:ut.u,!1)}if(dt.d&&ut.d&&dt.d.length!==ut.d.length){const e=ut.d.length>dt.d.length?ut:dt,t=e===ut?dt:ut;t.d=e.d.map(((e,n)=>$(t.d[n])?0:t.d[n])),t.s=ie(e.s)}const z=te(+v||u,12),W={parent:this,id:yt++,property:a,target:t,_value:null,_func:ct.func,_ease:nt(T),_fromNumbers:ie(ut.d),_toNumbers:ie(dt.d),_strings:ie(dt.s),_fromNumber:ut.n,_toNumber:dt.n,_numbers:ie(ut.d),_number:ut.n,_unit:dt.u,_modifier:S,_currentTime:0,_startTime:Y,_delay:+N,_updateDuration:z,_changeDuration:z,_absoluteStartTime:Z,_tweenType:o,_valueType:dt.t,_composition:D,_isOverlapped:0,_isOverridden:0,_renderTransforms:0,_prevRep:null,_nextRep:null,_prevAdd:null,_nextAdd:null,_prev:null,_next:null};D!==r.none&&Be(W,m),isNaN(y)&&(y=W._startTime),g=te(Y+z,12),f=W,q++,le(this,W)}(isNaN(B)||y<B)&&(B=y),(isNaN(P)||g>P)&&(P=g),3===o&&(h=q-b,p=q)}if(!isNaN(h)){let e=0;oe(this,(t=>{e>=h&&e<p&&(t._renderTransforms=1,t._composition===r.blend&&oe(he.animation,(e=>{e.id===t.id&&(e._renderTransforms=1)}))),e++}))}}var U;d||console.warn("No target found. Make sure the element you're trying to animate is accessible before creating your animation."),B?(oe(this,(e=>{e._startTime-e._delay||(e._delay-=B),e._startTime-=B})),P-=B):B=0,P||(P=u,this.iterationCount=0),this.targets=l,this.duration=P===u?u:re((P+this._loopDelay)*this.iterationCount-this._loopDelay)||u,this.onRender=T||v.onRender,this._ease=C,this._delay=B,this.iterationDuration=P,this._inlineStyles=A,!this._autoplay&&L&&this.onRender(this)}stretch(e){const t=this.duration;if(t===se(e))return this;const n=e/t;return oe(this,(e=>{e._updateDuration=se(e._updateDuration*n),e._changeDuration=se(e._changeDuration*n),e._currentTime*=n,e._startTime*=n,e._absoluteStartTime*=n})),super.stretch(e)}refresh(){return oe(this,(e=>{const t=we(e.target,e.property,e._tweenType);Re(t,Me),e._fromNumbers=ie(Me.d),e._fromNumber=Me.n,e._func&&(Re(e._func(),dt),e._toNumbers=ie(dt.d),e._strings=ie(dt.s),e._toNumber=dt.n)})),this}revert(){return super.revert(),lt(this)}then(e){return super.then(e)}}p.filter((e=>["X","Y","Z"].some((t=>e.endsWith(t))))),e&&($(CSS)||Object.hasOwnProperty.call(CSS,"registerProperty"));const bt={_head:null,_tail:null},Tt=(e,t,n)=>{let r=bt._head;for(;r;){const s=r._next,i=r.$el===e,o=!t||r.property===t,a=!n||r.parent===n;if(i&&o&&a){const e=r.animation;try{e.commitStyles()}catch{}e.cancel(),ae(bt,r);const t=r.parent;t&&(t._completed++,t.animations.length===t._completed&&(t.completed=!0,t.muteCallbacks||(t.paused=!0,t.onComplete(t),t._resolve(t))))}r=s}};const vt=(e,t,n)=>{let r=!1;return oe(t,(s=>{const i=s.target;if(e.includes(i)){const e=s.property,o=s._tweenType,a=st(n,i,o);(!a||a&&a===e)&&(s.parent._tail===s&&3===s._tweenType&&s._prev&&3===s._prev._tweenType&&(s._prev._renderTransforms=1),ae(t,s),qe(s),r=!0)}}),!0),r},Nt=(e,t,n)=>{const r=Te(e),s=t||fe,i=t&&t.controlAnimation&&t;for(let e=0,t=r.length;e<t;e++){const t=r[e];Tt(t,n,i)}let o;if(s._hasChildren){let t=0;oe(s,(i=>{if(!i._hasChildren)if(o=vt(r,i,n),o&&!i._head)i.cancel(),ae(s,i);else{const e=i._offset+i._delay+i.duration;e>t&&(t=e)}i._head?Nt(e,i,n):i._hasChildren=!1}),!0),$(s.iterationDuration)||(s.iterationDuration=t)}else o=vt(r,s,n);return o&&!s._head&&(s._hasChildren=!1,s.cancel&&s.cancel()),r},Ct=(e,t,n)=>{const r=10**(n||0);return J((Math.random()*(t-e+1/r)+e)*r)/r},Dt=e=>(...t)=>{const n=e(...t);return new Proxy(f,{apply:(e,t,[r])=>n(r),get:(e,t)=>Dt(((...e)=>{const r=xt[t](...e);return e=>r(n(e))}))})},kt=(e,t=0)=>(...n)=>(n.length<e.length?Dt(((e,t=0)=>(...n)=>t?t=>e(...n,t):t=>e(t,...n))(e,t)):e)(...n),xt={$:ve,get:function(e,t,n){const r=ve(e);if(!r.length)return;const[s]=r,i=xe(s,t),o=st(t,s,i);let a=we(s,o);if($(n))return a;if(Re(a,Me),0===Me.t||1===Me.t){if(!1===n)return Me.n;{const e=at(s,Me,n,!1);return`${te(e.n,S.precision)}${e.u}`}}},set:(e,t)=>{if(!$(t))return t.duration=u,t.composition=De(t.composition,r.none),new gt(e,t,null,0,!0).resume()},remove:Nt,cleanInlineStyles:lt,random:Ct,randomPick:e=>e[Ct(0,e.length-1)],shuffle:e=>{let t,n,r=e.length;for(;r;)n=Ct(0,--r),t=e[r],e[r]=e[n],e[n]=t;return e},lerp:(e,t,n,r)=>{let s=c/S.defaults.frameRate;if(!1!==r){const e=r||fe._hasChildren&&fe;e&&e.deltaTime&&(s=e.deltaTime)}const i=1-Math.exp(-n*s*.1);return n?1===n?t:(1-i)*e+i*t:e},sync:(e=f)=>new Xe({duration:1*S.timeScale,onComplete:e},null,0).resume(),clamp:kt(K),round:kt(te),snap:kt(((e,t)=>E(t)?t.reduce(((t,n)=>W(n-e)<W(t-e)?n:t)):t?G(e/t)*t:e)),wrap:kt(((e,t,n)=>((e-t)%(n-t)+(n-t))%(n-t)+t)),interpolate:kt(ne,1),mapRange:kt(((e,t,n,r,s)=>r+(e-t)/(n-t)*(s-r))),roundPad:kt(((e,t)=>(+e).toFixed(t))),padStart:kt(((e,t,n)=>`${e}`.padStart(t,n))),padEnd:kt(((e,t,n)=>`${e}`.padEnd(t,n))),degToRad:kt((e=>e*V/180)),radToDeg:kt((e=>180*e/V))};new Map;const St=document.querySelector(".container"),wt=document.getElementById("range"),It=document.getElementById("count"),Rt=document.getElementById("click-btn"),Et=document.getElementById("timer");let Mt=0;const At=[],Ot=[];function $t(e,t,n=0){const r=10**n;return Math.round((Math.random()*(t-e)+e)*r)/r}function Pt(e){return String(e).padStart(2,"0")}let Bt=20;Et.textContent=`00:${Pt(Bt)}`;let qt=setInterval((()=>{if(Bt--,Bt<0)return clearInterval(qt),Et.textContent="00:00",Ut(),void(Mt<100&&Ft("ざんねん！"));Et.textContent=`00:${Pt(Bt)}`}),1e3);function Lt(e){const t=150+30*e,n=10+5*e,r=3+2*e,s=1+.3*e,i=1200-100*e>400?1200-100*e:400;Ot.forEach((e=>e.pause())),Ot.length=0;for(let e=0;e<At.length;e++){const l=At[e];if(e<t){l.style.display="block";const e=(o=l,a={x:$t(-n,n,2)+"rem",y:$t(-r,r,2)+"rem",scale:[{value:[0,s],duration:i/2},{value:0,duration:i/2}],delay:$t(0,i),duration:i,easing:"easeInOutSine",loop:!0},new gt(o,a,null,0,!1).init());Ot.push(e)}else l.style.display="none"}var o,a}function Ut(){Rt.disabled=!0,Rt.style.cursor="default",Rt.style.filter="grayscale(80%)"}function Ft(e){At.forEach((e=>e.style.display="none")),Ot.forEach((e=>e.pause())),Ot.length=0;const t=St.querySelector(".result-message");t&&t.remove();const n=document.createElement("div");n.classList.add("result-message"),n.style.position="absolute",n.style.top="50%",n.style.left="50%",n.style.transform="translate(-50%, -50%)",n.style.fontSize="4rem",n.style.color="#a68cff",n.style.fontWeight="bold",n.style.userSelect="none",n.textContent=e,St.appendChild(n)}Rt.addEventListener("click",(()=>{if(Mt>=100)return;if(Mt++,It.textContent=`Clicks: ${Mt}/100`,100===Mt)return clearInterval(qt),Ut(),void Ft("クリアおめでとう！");const e=Math.floor(Mt/5);Lt(e>10?10:e)})),wt.addEventListener("input",(()=>{fe.precision=parseInt(wt.value)})),function(){for(let e=0;e<450;e++){const e=document.createElement("div");e.classList.add("particle"),St.appendChild(e),At.push(e)}}(),fe.precision=parseInt(wt.value),It.textContent="Clicks: 0/100",Lt(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,